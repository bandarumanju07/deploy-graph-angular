{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { invariant, InvariantError } from \"../utilities/globals/index.js\";\nimport { equal } from '@wry/equality';\nimport { execute } from \"../link/core/index.js\";\nimport { isExecutionPatchIncrementalResult, isExecutionPatchResult } from \"../utilities/common/incrementalResult.js\";\nimport { canonicalStringify } from \"../cache/index.js\";\nimport { getDefaultValues, getOperationDefinition, getOperationName, hasClientExports, graphQLResultHasError, getGraphQLErrorsFromResult, removeConnectionDirectiveFromDocument, canUseWeakMap, Observable, asyncMap, isNonEmptyArray, Concast, makeUniqueId, isDocumentNode, isNonNullObject } from \"../utilities/index.js\";\nimport { mergeIncrementalData } from \"../utilities/common/incrementalResult.js\";\nimport { ApolloError, isApolloError } from \"../errors/index.js\";\nimport { ObservableQuery, logMissingFieldErrors } from \"./ObservableQuery.js\";\nimport { NetworkStatus, isNetworkRequestInFlight } from \"./networkStatus.js\";\nimport { LocalState } from \"./LocalState.js\";\nimport { QueryInfo, shouldWriteResult } from \"./QueryInfo.js\";\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar QueryManager = function () {\n  function QueryManager(_a) {\n    var cache = _a.cache,\n      link = _a.link,\n      defaultOptions = _a.defaultOptions,\n      _b = _a.queryDeduplication,\n      queryDeduplication = _b === void 0 ? false : _b,\n      onBroadcast = _a.onBroadcast,\n      _c = _a.ssrMode,\n      ssrMode = _c === void 0 ? false : _c,\n      _d = _a.clientAwareness,\n      clientAwareness = _d === void 0 ? {} : _d,\n      localState = _a.localState,\n      assumeImmutableResults = _a.assumeImmutableResults;\n    this.clientAwareness = {};\n    this.queries = new Map();\n    this.fetchCancelFns = new Map();\n    this.transformCache = new (canUseWeakMap ? WeakMap : Map)();\n    this.queryIdCounter = 1;\n    this.requestIdCounter = 1;\n    this.mutationIdCounter = 1;\n    this.inFlightLinkObservables = new Map();\n    this.cache = cache;\n    this.link = link;\n    this.defaultOptions = defaultOptions || Object.create(null);\n    this.queryDeduplication = queryDeduplication;\n    this.clientAwareness = clientAwareness;\n    this.localState = localState || new LocalState({\n      cache: cache\n    });\n    this.ssrMode = ssrMode;\n    this.assumeImmutableResults = !!assumeImmutableResults;\n    if (this.onBroadcast = onBroadcast) {\n      this.mutationStore = Object.create(null);\n    }\n  }\n  QueryManager.prototype.stop = function () {\n    var _this = this;\n    this.queries.forEach(function (_info, queryId) {\n      _this.stopQueryNoBroadcast(queryId);\n    });\n    this.cancelPendingFetches(__DEV__ ? new InvariantError('QueryManager stopped while query was in flight') : new InvariantError(14));\n  };\n  QueryManager.prototype.cancelPendingFetches = function (error) {\n    this.fetchCancelFns.forEach(function (cancel) {\n      return cancel(error);\n    });\n    this.fetchCancelFns.clear();\n  };\n  QueryManager.prototype.mutate = function (_a) {\n    var _b, _c;\n    var mutation = _a.mutation,\n      variables = _a.variables,\n      optimisticResponse = _a.optimisticResponse,\n      updateQueries = _a.updateQueries,\n      _d = _a.refetchQueries,\n      refetchQueries = _d === void 0 ? [] : _d,\n      _e = _a.awaitRefetchQueries,\n      awaitRefetchQueries = _e === void 0 ? false : _e,\n      updateWithProxyFn = _a.update,\n      onQueryUpdated = _a.onQueryUpdated,\n      _f = _a.fetchPolicy,\n      fetchPolicy = _f === void 0 ? ((_b = this.defaultOptions.mutate) === null || _b === void 0 ? void 0 : _b.fetchPolicy) || \"network-only\" : _f,\n      _g = _a.errorPolicy,\n      errorPolicy = _g === void 0 ? ((_c = this.defaultOptions.mutate) === null || _c === void 0 ? void 0 : _c.errorPolicy) || \"none\" : _g,\n      keepRootFields = _a.keepRootFields,\n      context = _a.context;\n    return __awaiter(this, void 0, void 0, function () {\n      var mutationId, _h, document, hasClientExports, mutationStoreValue, self;\n      return __generator(this, function (_j) {\n        switch (_j.label) {\n          case 0:\n            __DEV__ ? invariant(mutation, 'mutation option is required. You must specify your GraphQL document in the mutation option.') : invariant(mutation, 15);\n            __DEV__ ? invariant(fetchPolicy === 'network-only' || fetchPolicy === 'no-cache', \"Mutations support only 'network-only' or 'no-cache' fetchPolicy strings. The default `network-only` behavior automatically writes mutation results to the cache. Passing `no-cache` skips the cache write.\") : invariant(fetchPolicy === 'network-only' || fetchPolicy === 'no-cache', 16);\n            mutationId = this.generateMutationId();\n            _h = this.transform(mutation), document = _h.document, hasClientExports = _h.hasClientExports;\n            mutation = this.cache.transformForLink(document);\n            variables = this.getVariables(mutation, variables);\n            if (!hasClientExports) return [3, 2];\n            return [4, this.localState.addExportedVariables(mutation, variables, context)];\n          case 1:\n            variables = _j.sent();\n            _j.label = 2;\n          case 2:\n            mutationStoreValue = this.mutationStore && (this.mutationStore[mutationId] = {\n              mutation: mutation,\n              variables: variables,\n              loading: true,\n              error: null\n            });\n            if (optimisticResponse) {\n              this.markMutationOptimistic(optimisticResponse, {\n                mutationId: mutationId,\n                document: mutation,\n                variables: variables,\n                fetchPolicy: fetchPolicy,\n                errorPolicy: errorPolicy,\n                context: context,\n                updateQueries: updateQueries,\n                update: updateWithProxyFn,\n                keepRootFields: keepRootFields\n              });\n            }\n            this.broadcastQueries();\n            self = this;\n            return [2, new Promise(function (resolve, reject) {\n              return asyncMap(self.getObservableFromLink(mutation, __assign(__assign({}, context), {\n                optimisticResponse: optimisticResponse\n              }), variables, false), function (result) {\n                if (graphQLResultHasError(result) && errorPolicy === 'none') {\n                  throw new ApolloError({\n                    graphQLErrors: getGraphQLErrorsFromResult(result)\n                  });\n                }\n                if (mutationStoreValue) {\n                  mutationStoreValue.loading = false;\n                  mutationStoreValue.error = null;\n                }\n                var storeResult = __assign({}, result);\n                if (typeof refetchQueries === \"function\") {\n                  refetchQueries = refetchQueries(storeResult);\n                }\n                if (errorPolicy === 'ignore' && graphQLResultHasError(storeResult)) {\n                  delete storeResult.errors;\n                }\n                return self.markMutationResult({\n                  mutationId: mutationId,\n                  result: storeResult,\n                  document: mutation,\n                  variables: variables,\n                  fetchPolicy: fetchPolicy,\n                  errorPolicy: errorPolicy,\n                  context: context,\n                  update: updateWithProxyFn,\n                  updateQueries: updateQueries,\n                  awaitRefetchQueries: awaitRefetchQueries,\n                  refetchQueries: refetchQueries,\n                  removeOptimistic: optimisticResponse ? mutationId : void 0,\n                  onQueryUpdated: onQueryUpdated,\n                  keepRootFields: keepRootFields\n                });\n              }).subscribe({\n                next: function (storeResult) {\n                  self.broadcastQueries();\n                  if (!('hasNext' in storeResult) || storeResult.hasNext === false) {\n                    resolve(storeResult);\n                  }\n                },\n                error: function (err) {\n                  if (mutationStoreValue) {\n                    mutationStoreValue.loading = false;\n                    mutationStoreValue.error = err;\n                  }\n                  if (optimisticResponse) {\n                    self.cache.removeOptimistic(mutationId);\n                  }\n                  self.broadcastQueries();\n                  reject(err instanceof ApolloError ? err : new ApolloError({\n                    networkError: err\n                  }));\n                }\n              });\n            })];\n        }\n      });\n    });\n  };\n  QueryManager.prototype.markMutationResult = function (mutation, cache) {\n    var _this = this;\n    if (cache === void 0) {\n      cache = this.cache;\n    }\n    var result = mutation.result;\n    var cacheWrites = [];\n    var skipCache = mutation.fetchPolicy === \"no-cache\";\n    if (!skipCache && shouldWriteResult(result, mutation.errorPolicy)) {\n      if (!isExecutionPatchIncrementalResult(result)) {\n        cacheWrites.push({\n          result: result.data,\n          dataId: 'ROOT_MUTATION',\n          query: mutation.document,\n          variables: mutation.variables\n        });\n      }\n      if (isExecutionPatchIncrementalResult(result) && isNonEmptyArray(result.incremental)) {\n        var diff = cache.diff({\n          id: \"ROOT_MUTATION\",\n          query: this.transform(mutation.document).asQuery,\n          variables: mutation.variables,\n          optimistic: false,\n          returnPartialData: true\n        });\n        var mergedData = void 0;\n        if (diff.result) {\n          mergedData = mergeIncrementalData(diff.result, result);\n        }\n        if (typeof mergedData !== 'undefined') {\n          result.data = mergedData;\n          cacheWrites.push({\n            result: mergedData,\n            dataId: 'ROOT_MUTATION',\n            query: mutation.document,\n            variables: mutation.variables\n          });\n        }\n      }\n      var updateQueries_1 = mutation.updateQueries;\n      if (updateQueries_1) {\n        this.queries.forEach(function (_a, queryId) {\n          var observableQuery = _a.observableQuery;\n          var queryName = observableQuery && observableQuery.queryName;\n          if (!queryName || !hasOwnProperty.call(updateQueries_1, queryName)) {\n            return;\n          }\n          var updater = updateQueries_1[queryName];\n          var _b = _this.queries.get(queryId),\n            document = _b.document,\n            variables = _b.variables;\n          var _c = cache.diff({\n              query: document,\n              variables: variables,\n              returnPartialData: true,\n              optimistic: false\n            }),\n            currentQueryResult = _c.result,\n            complete = _c.complete;\n          if (complete && currentQueryResult) {\n            var nextQueryResult = updater(currentQueryResult, {\n              mutationResult: result,\n              queryName: document && getOperationName(document) || void 0,\n              queryVariables: variables\n            });\n            if (nextQueryResult) {\n              cacheWrites.push({\n                result: nextQueryResult,\n                dataId: 'ROOT_QUERY',\n                query: document,\n                variables: variables\n              });\n            }\n          }\n        });\n      }\n    }\n    if (cacheWrites.length > 0 || mutation.refetchQueries || mutation.update || mutation.onQueryUpdated || mutation.removeOptimistic) {\n      var results_1 = [];\n      this.refetchQueries({\n        updateCache: function (cache) {\n          if (!skipCache) {\n            cacheWrites.forEach(function (write) {\n              return cache.write(write);\n            });\n          }\n          var update = mutation.update;\n          var isFinalResult = !isExecutionPatchResult(result) || isExecutionPatchIncrementalResult(result) && !result.hasNext;\n          if (update) {\n            if (!skipCache) {\n              var diff = cache.diff({\n                id: \"ROOT_MUTATION\",\n                query: _this.transform(mutation.document).asQuery,\n                variables: mutation.variables,\n                optimistic: false,\n                returnPartialData: true\n              });\n              if (diff.complete) {\n                result = __assign(__assign({}, result), {\n                  data: diff.result\n                });\n                if ('incremental' in result) {\n                  delete result.incremental;\n                }\n                if ('hasNext' in result) {\n                  delete result.hasNext;\n                }\n              }\n            }\n            if (isFinalResult) {\n              update(cache, result, {\n                context: mutation.context,\n                variables: mutation.variables\n              });\n            }\n          }\n          if (!skipCache && !mutation.keepRootFields && isFinalResult) {\n            cache.modify({\n              id: 'ROOT_MUTATION',\n              fields: function (value, _a) {\n                var fieldName = _a.fieldName,\n                  DELETE = _a.DELETE;\n                return fieldName === \"__typename\" ? value : DELETE;\n              }\n            });\n          }\n        },\n        include: mutation.refetchQueries,\n        optimistic: false,\n        removeOptimistic: mutation.removeOptimistic,\n        onQueryUpdated: mutation.onQueryUpdated || null\n      }).forEach(function (result) {\n        return results_1.push(result);\n      });\n      if (mutation.awaitRefetchQueries || mutation.onQueryUpdated) {\n        return Promise.all(results_1).then(function () {\n          return result;\n        });\n      }\n    }\n    return Promise.resolve(result);\n  };\n  QueryManager.prototype.markMutationOptimistic = function (optimisticResponse, mutation) {\n    var _this = this;\n    var data = typeof optimisticResponse === \"function\" ? optimisticResponse(mutation.variables) : optimisticResponse;\n    return this.cache.recordOptimisticTransaction(function (cache) {\n      try {\n        _this.markMutationResult(__assign(__assign({}, mutation), {\n          result: {\n            data: data\n          }\n        }), cache);\n      } catch (error) {\n        __DEV__ && invariant.error(error);\n      }\n    }, mutation.mutationId);\n  };\n  QueryManager.prototype.fetchQuery = function (queryId, options, networkStatus) {\n    return this.fetchQueryObservable(queryId, options, networkStatus).promise;\n  };\n  QueryManager.prototype.getQueryStore = function () {\n    var store = Object.create(null);\n    this.queries.forEach(function (info, queryId) {\n      store[queryId] = {\n        variables: info.variables,\n        networkStatus: info.networkStatus,\n        networkError: info.networkError,\n        graphQLErrors: info.graphQLErrors\n      };\n    });\n    return store;\n  };\n  QueryManager.prototype.resetErrors = function (queryId) {\n    var queryInfo = this.queries.get(queryId);\n    if (queryInfo) {\n      queryInfo.networkError = undefined;\n      queryInfo.graphQLErrors = [];\n    }\n  };\n  QueryManager.prototype.transform = function (document) {\n    var transformCache = this.transformCache;\n    if (!transformCache.has(document)) {\n      var transformed = this.cache.transformDocument(document);\n      var noConnection = removeConnectionDirectiveFromDocument(transformed);\n      var clientQuery = this.localState.clientQuery(transformed);\n      var serverQuery = noConnection && this.localState.serverQuery(noConnection);\n      var cacheEntry_1 = {\n        document: transformed,\n        hasClientExports: hasClientExports(transformed),\n        hasForcedResolvers: this.localState.shouldForceResolvers(transformed),\n        clientQuery: clientQuery,\n        serverQuery: serverQuery,\n        defaultVars: getDefaultValues(getOperationDefinition(transformed)),\n        asQuery: __assign(__assign({}, transformed), {\n          definitions: transformed.definitions.map(function (def) {\n            if (def.kind === \"OperationDefinition\" && def.operation !== \"query\") {\n              return __assign(__assign({}, def), {\n                operation: \"query\"\n              });\n            }\n            return def;\n          })\n        })\n      };\n      var add = function (doc) {\n        if (doc && !transformCache.has(doc)) {\n          transformCache.set(doc, cacheEntry_1);\n        }\n      };\n      add(document);\n      add(transformed);\n      add(clientQuery);\n      add(serverQuery);\n    }\n    return transformCache.get(document);\n  };\n  QueryManager.prototype.getVariables = function (document, variables) {\n    return __assign(__assign({}, this.transform(document).defaultVars), variables);\n  };\n  QueryManager.prototype.watchQuery = function (options) {\n    options = __assign(__assign({}, options), {\n      variables: this.getVariables(options.query, options.variables)\n    });\n    if (typeof options.notifyOnNetworkStatusChange === 'undefined') {\n      options.notifyOnNetworkStatusChange = false;\n    }\n    var queryInfo = new QueryInfo(this);\n    var observable = new ObservableQuery({\n      queryManager: this,\n      queryInfo: queryInfo,\n      options: options\n    });\n    this.queries.set(observable.queryId, queryInfo);\n    queryInfo.init({\n      document: observable.query,\n      observableQuery: observable,\n      variables: observable.variables\n    });\n    return observable;\n  };\n  QueryManager.prototype.query = function (options, queryId) {\n    var _this = this;\n    if (queryId === void 0) {\n      queryId = this.generateQueryId();\n    }\n    __DEV__ ? invariant(options.query, 'query option is required. You must specify your GraphQL document ' + 'in the query option.') : invariant(options.query, 17);\n    __DEV__ ? invariant(options.query.kind === 'Document', 'You must wrap the query string in a \"gql\" tag.') : invariant(options.query.kind === 'Document', 18);\n    __DEV__ ? invariant(!options.returnPartialData, 'returnPartialData option only supported on watchQuery.') : invariant(!options.returnPartialData, 19);\n    __DEV__ ? invariant(!options.pollInterval, 'pollInterval option only supported on watchQuery.') : invariant(!options.pollInterval, 20);\n    return this.fetchQuery(queryId, options).finally(function () {\n      return _this.stopQuery(queryId);\n    });\n  };\n  QueryManager.prototype.generateQueryId = function () {\n    return String(this.queryIdCounter++);\n  };\n  QueryManager.prototype.generateRequestId = function () {\n    return this.requestIdCounter++;\n  };\n  QueryManager.prototype.generateMutationId = function () {\n    return String(this.mutationIdCounter++);\n  };\n  QueryManager.prototype.stopQueryInStore = function (queryId) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.broadcastQueries();\n  };\n  QueryManager.prototype.stopQueryInStoreNoBroadcast = function (queryId) {\n    var queryInfo = this.queries.get(queryId);\n    if (queryInfo) queryInfo.stop();\n  };\n  QueryManager.prototype.clearStore = function (options) {\n    if (options === void 0) {\n      options = {\n        discardWatches: true\n      };\n    }\n    this.cancelPendingFetches(__DEV__ ? new InvariantError('Store reset while query was in flight (not completed in link chain)') : new InvariantError(21));\n    this.queries.forEach(function (queryInfo) {\n      if (queryInfo.observableQuery) {\n        queryInfo.networkStatus = NetworkStatus.loading;\n      } else {\n        queryInfo.stop();\n      }\n    });\n    if (this.mutationStore) {\n      this.mutationStore = Object.create(null);\n    }\n    return this.cache.reset(options);\n  };\n  QueryManager.prototype.getObservableQueries = function (include) {\n    var _this = this;\n    if (include === void 0) {\n      include = \"active\";\n    }\n    var queries = new Map();\n    var queryNamesAndDocs = new Map();\n    var legacyQueryOptions = new Set();\n    if (Array.isArray(include)) {\n      include.forEach(function (desc) {\n        if (typeof desc === \"string\") {\n          queryNamesAndDocs.set(desc, false);\n        } else if (isDocumentNode(desc)) {\n          queryNamesAndDocs.set(_this.transform(desc).document, false);\n        } else if (isNonNullObject(desc) && desc.query) {\n          legacyQueryOptions.add(desc);\n        }\n      });\n    }\n    this.queries.forEach(function (_a, queryId) {\n      var oq = _a.observableQuery,\n        document = _a.document;\n      if (oq) {\n        if (include === \"all\") {\n          queries.set(queryId, oq);\n          return;\n        }\n        var queryName = oq.queryName,\n          fetchPolicy = oq.options.fetchPolicy;\n        if (fetchPolicy === \"standby\" || include === \"active\" && !oq.hasObservers()) {\n          return;\n        }\n        if (include === \"active\" || queryName && queryNamesAndDocs.has(queryName) || document && queryNamesAndDocs.has(document)) {\n          queries.set(queryId, oq);\n          if (queryName) queryNamesAndDocs.set(queryName, true);\n          if (document) queryNamesAndDocs.set(document, true);\n        }\n      }\n    });\n    if (legacyQueryOptions.size) {\n      legacyQueryOptions.forEach(function (options) {\n        var queryId = makeUniqueId(\"legacyOneTimeQuery\");\n        var queryInfo = _this.getQuery(queryId).init({\n          document: options.query,\n          variables: options.variables\n        });\n        var oq = new ObservableQuery({\n          queryManager: _this,\n          queryInfo: queryInfo,\n          options: __assign(__assign({}, options), {\n            fetchPolicy: \"network-only\"\n          })\n        });\n        invariant(oq.queryId === queryId);\n        queryInfo.setObservableQuery(oq);\n        queries.set(queryId, oq);\n      });\n    }\n    if (__DEV__ && queryNamesAndDocs.size) {\n      queryNamesAndDocs.forEach(function (included, nameOrDoc) {\n        if (!included) {\n          __DEV__ && invariant.warn(\"Unknown query \".concat(typeof nameOrDoc === \"string\" ? \"named \" : \"\").concat(JSON.stringify(nameOrDoc, null, 2), \" requested in refetchQueries options.include array\"));\n        }\n      });\n    }\n    return queries;\n  };\n  QueryManager.prototype.reFetchObservableQueries = function (includeStandby) {\n    var _this = this;\n    if (includeStandby === void 0) {\n      includeStandby = false;\n    }\n    var observableQueryPromises = [];\n    this.getObservableQueries(includeStandby ? \"all\" : \"active\").forEach(function (observableQuery, queryId) {\n      var fetchPolicy = observableQuery.options.fetchPolicy;\n      observableQuery.resetLastResults();\n      if (includeStandby || fetchPolicy !== \"standby\" && fetchPolicy !== \"cache-only\") {\n        observableQueryPromises.push(observableQuery.refetch());\n      }\n      _this.getQuery(queryId).setDiff(null);\n    });\n    this.broadcastQueries();\n    return Promise.all(observableQueryPromises);\n  };\n  QueryManager.prototype.setObservableQuery = function (observableQuery) {\n    this.getQuery(observableQuery.queryId).setObservableQuery(observableQuery);\n  };\n  QueryManager.prototype.startGraphQLSubscription = function (_a) {\n    var _this = this;\n    var query = _a.query,\n      fetchPolicy = _a.fetchPolicy,\n      errorPolicy = _a.errorPolicy,\n      variables = _a.variables,\n      _b = _a.context,\n      context = _b === void 0 ? {} : _b;\n    query = this.transform(query).document;\n    variables = this.getVariables(query, variables);\n    var makeObservable = function (variables) {\n      return _this.getObservableFromLink(query, context, variables).map(function (result) {\n        if (fetchPolicy !== 'no-cache') {\n          if (shouldWriteResult(result, errorPolicy)) {\n            _this.cache.write({\n              query: query,\n              result: result.data,\n              dataId: 'ROOT_SUBSCRIPTION',\n              variables: variables\n            });\n          }\n          _this.broadcastQueries();\n        }\n        if (graphQLResultHasError(result)) {\n          throw new ApolloError({\n            graphQLErrors: result.errors\n          });\n        }\n        return result;\n      });\n    };\n    if (this.transform(query).hasClientExports) {\n      var observablePromise_1 = this.localState.addExportedVariables(query, variables, context).then(makeObservable);\n      return new Observable(function (observer) {\n        var sub = null;\n        observablePromise_1.then(function (observable) {\n          return sub = observable.subscribe(observer);\n        }, observer.error);\n        return function () {\n          return sub && sub.unsubscribe();\n        };\n      });\n    }\n    return makeObservable(variables);\n  };\n  QueryManager.prototype.stopQuery = function (queryId) {\n    this.stopQueryNoBroadcast(queryId);\n    this.broadcastQueries();\n  };\n  QueryManager.prototype.stopQueryNoBroadcast = function (queryId) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.removeQuery(queryId);\n  };\n  QueryManager.prototype.removeQuery = function (queryId) {\n    this.fetchCancelFns.delete(queryId);\n    if (this.queries.has(queryId)) {\n      this.getQuery(queryId).stop();\n      this.queries.delete(queryId);\n    }\n  };\n  QueryManager.prototype.broadcastQueries = function () {\n    if (this.onBroadcast) this.onBroadcast();\n    this.queries.forEach(function (info) {\n      return info.notify();\n    });\n  };\n  QueryManager.prototype.getLocalState = function () {\n    return this.localState;\n  };\n  QueryManager.prototype.getObservableFromLink = function (query, context, variables, deduplication) {\n    var _this = this;\n    var _a;\n    if (deduplication === void 0) {\n      deduplication = (_a = context === null || context === void 0 ? void 0 : context.queryDeduplication) !== null && _a !== void 0 ? _a : this.queryDeduplication;\n    }\n    var observable;\n    var serverQuery = this.transform(query).serverQuery;\n    if (serverQuery) {\n      var _b = this,\n        inFlightLinkObservables_1 = _b.inFlightLinkObservables,\n        link = _b.link;\n      var operation = {\n        query: serverQuery,\n        variables: variables,\n        operationName: getOperationName(serverQuery) || void 0,\n        context: this.prepareContext(__assign(__assign({}, context), {\n          forceFetch: !deduplication\n        }))\n      };\n      context = operation.context;\n      if (deduplication) {\n        var byVariables_1 = inFlightLinkObservables_1.get(serverQuery) || new Map();\n        inFlightLinkObservables_1.set(serverQuery, byVariables_1);\n        var varJson_1 = canonicalStringify(variables);\n        observable = byVariables_1.get(varJson_1);\n        if (!observable) {\n          var concast = new Concast([execute(link, operation)]);\n          byVariables_1.set(varJson_1, observable = concast);\n          concast.beforeNext(function () {\n            if (byVariables_1.delete(varJson_1) && byVariables_1.size < 1) {\n              inFlightLinkObservables_1.delete(serverQuery);\n            }\n          });\n        }\n      } else {\n        observable = new Concast([execute(link, operation)]);\n      }\n    } else {\n      observable = new Concast([Observable.of({\n        data: {}\n      })]);\n      context = this.prepareContext(context);\n    }\n    var clientQuery = this.transform(query).clientQuery;\n    if (clientQuery) {\n      observable = asyncMap(observable, function (result) {\n        return _this.localState.runResolvers({\n          document: clientQuery,\n          remoteResult: result,\n          context: context,\n          variables: variables\n        });\n      });\n    }\n    return observable;\n  };\n  QueryManager.prototype.getResultsFromLink = function (queryInfo, cacheWriteBehavior, options) {\n    var requestId = queryInfo.lastRequestId = this.generateRequestId();\n    var linkDocument = this.cache.transformForLink(this.transform(queryInfo.document).document);\n    return asyncMap(this.getObservableFromLink(linkDocument, options.context, options.variables), function (result) {\n      var graphQLErrors = getGraphQLErrorsFromResult(result);\n      var hasErrors = graphQLErrors.length > 0;\n      if (requestId >= queryInfo.lastRequestId) {\n        if (hasErrors && options.errorPolicy === \"none\") {\n          throw queryInfo.markError(new ApolloError({\n            graphQLErrors: graphQLErrors\n          }));\n        }\n        queryInfo.markResult(result, linkDocument, options, cacheWriteBehavior);\n        queryInfo.markReady();\n      }\n      var aqr = {\n        data: result.data,\n        loading: false,\n        networkStatus: NetworkStatus.ready\n      };\n      if (hasErrors && options.errorPolicy !== \"ignore\") {\n        aqr.errors = graphQLErrors;\n        aqr.networkStatus = NetworkStatus.error;\n      }\n      return aqr;\n    }, function (networkError) {\n      var error = isApolloError(networkError) ? networkError : new ApolloError({\n        networkError: networkError\n      });\n      if (requestId >= queryInfo.lastRequestId) {\n        queryInfo.markError(error);\n      }\n      throw error;\n    });\n  };\n  QueryManager.prototype.fetchQueryObservable = function (queryId, options, networkStatus) {\n    var _this = this;\n    if (networkStatus === void 0) {\n      networkStatus = NetworkStatus.loading;\n    }\n    var query = this.transform(options.query).document;\n    var variables = this.getVariables(query, options.variables);\n    var queryInfo = this.getQuery(queryId);\n    var defaults = this.defaultOptions.watchQuery;\n    var _a = options.fetchPolicy,\n      fetchPolicy = _a === void 0 ? defaults && defaults.fetchPolicy || \"cache-first\" : _a,\n      _b = options.errorPolicy,\n      errorPolicy = _b === void 0 ? defaults && defaults.errorPolicy || \"none\" : _b,\n      _c = options.returnPartialData,\n      returnPartialData = _c === void 0 ? false : _c,\n      _d = options.notifyOnNetworkStatusChange,\n      notifyOnNetworkStatusChange = _d === void 0 ? false : _d,\n      _e = options.context,\n      context = _e === void 0 ? {} : _e;\n    var normalized = Object.assign({}, options, {\n      query: query,\n      variables: variables,\n      fetchPolicy: fetchPolicy,\n      errorPolicy: errorPolicy,\n      returnPartialData: returnPartialData,\n      notifyOnNetworkStatusChange: notifyOnNetworkStatusChange,\n      context: context\n    });\n    var fromVariables = function (variables) {\n      normalized.variables = variables;\n      var concastSources = _this.fetchQueryByPolicy(queryInfo, normalized, networkStatus);\n      if (normalized.fetchPolicy !== \"standby\" && concastSources.length > 0 && queryInfo.observableQuery) {\n        queryInfo.observableQuery[\"applyNextFetchPolicy\"](\"after-fetch\", options);\n      }\n      return concastSources;\n    };\n    var cleanupCancelFn = function () {\n      return _this.fetchCancelFns.delete(queryId);\n    };\n    this.fetchCancelFns.set(queryId, function (reason) {\n      cleanupCancelFn();\n      setTimeout(function () {\n        return concast.cancel(reason);\n      });\n    });\n    var concast = new Concast(this.transform(normalized.query).hasClientExports ? this.localState.addExportedVariables(normalized.query, normalized.variables, normalized.context).then(fromVariables) : fromVariables(normalized.variables));\n    concast.promise.then(cleanupCancelFn, cleanupCancelFn);\n    return concast;\n  };\n  QueryManager.prototype.refetchQueries = function (_a) {\n    var _this = this;\n    var updateCache = _a.updateCache,\n      include = _a.include,\n      _b = _a.optimistic,\n      optimistic = _b === void 0 ? false : _b,\n      _c = _a.removeOptimistic,\n      removeOptimistic = _c === void 0 ? optimistic ? makeUniqueId(\"refetchQueries\") : void 0 : _c,\n      onQueryUpdated = _a.onQueryUpdated;\n    var includedQueriesById = new Map();\n    if (include) {\n      this.getObservableQueries(include).forEach(function (oq, queryId) {\n        includedQueriesById.set(queryId, {\n          oq: oq,\n          lastDiff: _this.getQuery(queryId).getDiff()\n        });\n      });\n    }\n    var results = new Map();\n    if (updateCache) {\n      this.cache.batch({\n        update: updateCache,\n        optimistic: optimistic && removeOptimistic || false,\n        removeOptimistic: removeOptimistic,\n        onWatchUpdated: function (watch, diff, lastDiff) {\n          var oq = watch.watcher instanceof QueryInfo && watch.watcher.observableQuery;\n          if (oq) {\n            if (onQueryUpdated) {\n              includedQueriesById.delete(oq.queryId);\n              var result = onQueryUpdated(oq, diff, lastDiff);\n              if (result === true) {\n                result = oq.refetch();\n              }\n              if (result !== false) {\n                results.set(oq, result);\n              }\n              return result;\n            }\n            if (onQueryUpdated !== null) {\n              includedQueriesById.set(oq.queryId, {\n                oq: oq,\n                lastDiff: lastDiff,\n                diff: diff\n              });\n            }\n          }\n        }\n      });\n    }\n    if (includedQueriesById.size) {\n      includedQueriesById.forEach(function (_a, queryId) {\n        var oq = _a.oq,\n          lastDiff = _a.lastDiff,\n          diff = _a.diff;\n        var result;\n        if (onQueryUpdated) {\n          if (!diff) {\n            var info = oq[\"queryInfo\"];\n            info.reset();\n            diff = info.getDiff();\n          }\n          result = onQueryUpdated(oq, diff, lastDiff);\n        }\n        if (!onQueryUpdated || result === true) {\n          result = oq.refetch();\n        }\n        if (result !== false) {\n          results.set(oq, result);\n        }\n        if (queryId.indexOf(\"legacyOneTimeQuery\") >= 0) {\n          _this.stopQueryNoBroadcast(queryId);\n        }\n      });\n    }\n    if (removeOptimistic) {\n      this.cache.removeOptimistic(removeOptimistic);\n    }\n    return results;\n  };\n  QueryManager.prototype.fetchQueryByPolicy = function (queryInfo, _a, networkStatus) {\n    var _this = this;\n    var query = _a.query,\n      variables = _a.variables,\n      fetchPolicy = _a.fetchPolicy,\n      refetchWritePolicy = _a.refetchWritePolicy,\n      errorPolicy = _a.errorPolicy,\n      returnPartialData = _a.returnPartialData,\n      context = _a.context,\n      notifyOnNetworkStatusChange = _a.notifyOnNetworkStatusChange;\n    var oldNetworkStatus = queryInfo.networkStatus;\n    queryInfo.init({\n      document: this.transform(query).document,\n      variables: variables,\n      networkStatus: networkStatus\n    });\n    var readCache = function () {\n      return queryInfo.getDiff(variables);\n    };\n    var resultsFromCache = function (diff, networkStatus) {\n      if (networkStatus === void 0) {\n        networkStatus = queryInfo.networkStatus || NetworkStatus.loading;\n      }\n      var data = diff.result;\n      if (__DEV__ && !returnPartialData && !equal(data, {})) {\n        logMissingFieldErrors(diff.missing);\n      }\n      var fromData = function (data) {\n        return Observable.of(__assign({\n          data: data,\n          loading: isNetworkRequestInFlight(networkStatus),\n          networkStatus: networkStatus\n        }, diff.complete ? null : {\n          partial: true\n        }));\n      };\n      if (data && _this.transform(query).hasForcedResolvers) {\n        return _this.localState.runResolvers({\n          document: query,\n          remoteResult: {\n            data: data\n          },\n          context: context,\n          variables: variables,\n          onlyRunForcedResolvers: true\n        }).then(function (resolved) {\n          return fromData(resolved.data || void 0);\n        });\n      }\n      if (errorPolicy === 'none' && networkStatus === NetworkStatus.refetch && Array.isArray(diff.missing)) {\n        return fromData(void 0);\n      }\n      return fromData(data);\n    };\n    var cacheWriteBehavior = fetchPolicy === \"no-cache\" ? 0 : networkStatus === NetworkStatus.refetch && refetchWritePolicy !== \"merge\" ? 1 : 2;\n    var resultsFromLink = function () {\n      return _this.getResultsFromLink(queryInfo, cacheWriteBehavior, {\n        variables: variables,\n        context: context,\n        fetchPolicy: fetchPolicy,\n        errorPolicy: errorPolicy\n      });\n    };\n    var shouldNotify = notifyOnNetworkStatusChange && typeof oldNetworkStatus === \"number\" && oldNetworkStatus !== networkStatus && isNetworkRequestInFlight(networkStatus);\n    switch (fetchPolicy) {\n      default:\n      case \"cache-first\":\n        {\n          var diff = readCache();\n          if (diff.complete) {\n            return [resultsFromCache(diff, queryInfo.markReady())];\n          }\n          if (returnPartialData || shouldNotify) {\n            return [resultsFromCache(diff), resultsFromLink()];\n          }\n          return [resultsFromLink()];\n        }\n      case \"cache-and-network\":\n        {\n          var diff = readCache();\n          if (diff.complete || returnPartialData || shouldNotify) {\n            return [resultsFromCache(diff), resultsFromLink()];\n          }\n          return [resultsFromLink()];\n        }\n      case \"cache-only\":\n        return [resultsFromCache(readCache(), queryInfo.markReady())];\n      case \"network-only\":\n        if (shouldNotify) {\n          return [resultsFromCache(readCache()), resultsFromLink()];\n        }\n        return [resultsFromLink()];\n      case \"no-cache\":\n        if (shouldNotify) {\n          return [resultsFromCache(queryInfo.getDiff()), resultsFromLink()];\n        }\n        return [resultsFromLink()];\n      case \"standby\":\n        return [];\n    }\n  };\n  QueryManager.prototype.getQuery = function (queryId) {\n    if (queryId && !this.queries.has(queryId)) {\n      this.queries.set(queryId, new QueryInfo(this, queryId));\n    }\n    return this.queries.get(queryId);\n  };\n  QueryManager.prototype.prepareContext = function (context) {\n    if (context === void 0) {\n      context = {};\n    }\n    var newContext = this.localState.prepareContext(context);\n    return __assign(__assign({}, newContext), {\n      clientAwareness: this.clientAwareness\n    });\n  };\n  return QueryManager;\n}();\nexport { QueryManager };","map":{"version":3,"names":["__assign","__awaiter","__generator","invariant","InvariantError","equal","execute","isExecutionPatchIncrementalResult","isExecutionPatchResult","canonicalStringify","getDefaultValues","getOperationDefinition","getOperationName","hasClientExports","graphQLResultHasError","getGraphQLErrorsFromResult","removeConnectionDirectiveFromDocument","canUseWeakMap","Observable","asyncMap","isNonEmptyArray","Concast","makeUniqueId","isDocumentNode","isNonNullObject","mergeIncrementalData","ApolloError","isApolloError","ObservableQuery","logMissingFieldErrors","NetworkStatus","isNetworkRequestInFlight","LocalState","QueryInfo","shouldWriteResult","hasOwnProperty","Object","prototype","QueryManager","_a","cache","link","defaultOptions","_b","queryDeduplication","onBroadcast","_c","ssrMode","_d","clientAwareness","localState","assumeImmutableResults","queries","Map","fetchCancelFns","transformCache","WeakMap","queryIdCounter","requestIdCounter","mutationIdCounter","inFlightLinkObservables","create","mutationStore","stop","_this","forEach","_info","queryId","stopQueryNoBroadcast","cancelPendingFetches","__DEV__","error","cancel","clear","mutate","mutation","variables","optimisticResponse","updateQueries","refetchQueries","_e","awaitRefetchQueries","updateWithProxyFn","update","onQueryUpdated","_f","fetchPolicy","_g","errorPolicy","keepRootFields","context","mutationId","_h","document","mutationStoreValue","self","_j","label","generateMutationId","transform","transformForLink","getVariables","addExportedVariables","sent","loading","markMutationOptimistic","broadcastQueries","Promise","resolve","reject","getObservableFromLink","result","graphQLErrors","storeResult","errors","markMutationResult","removeOptimistic","subscribe","next","hasNext","err","networkError","cacheWrites","skipCache","push","data","dataId","query","incremental","diff","id","asQuery","optimistic","returnPartialData","mergedData","updateQueries_1","observableQuery","queryName","call","updater","get","currentQueryResult","complete","nextQueryResult","mutationResult","queryVariables","length","results_1","updateCache","write","isFinalResult","modify","fields","value","fieldName","DELETE","include","all","then","recordOptimisticTransaction","fetchQuery","options","networkStatus","fetchQueryObservable","promise","getQueryStore","store","info","resetErrors","queryInfo","undefined","has","transformed","transformDocument","noConnection","clientQuery","serverQuery","cacheEntry_1","hasForcedResolvers","shouldForceResolvers","defaultVars","definitions","map","def","kind","operation","add","doc","set","watchQuery","notifyOnNetworkStatusChange","observable","queryManager","init","generateQueryId","pollInterval","finally","stopQuery","String","generateRequestId","stopQueryInStore","stopQueryInStoreNoBroadcast","clearStore","discardWatches","reset","getObservableQueries","queryNamesAndDocs","legacyQueryOptions","Set","Array","isArray","desc","oq","hasObservers","size","getQuery","setObservableQuery","included","nameOrDoc","warn","concat","JSON","stringify","reFetchObservableQueries","includeStandby","observableQueryPromises","resetLastResults","refetch","setDiff","startGraphQLSubscription","makeObservable","observablePromise_1","observer","sub","unsubscribe","removeQuery","delete","notify","getLocalState","deduplication","inFlightLinkObservables_1","operationName","prepareContext","forceFetch","byVariables_1","varJson_1","concast","beforeNext","of","runResolvers","remoteResult","getResultsFromLink","cacheWriteBehavior","requestId","lastRequestId","linkDocument","hasErrors","markError","markResult","markReady","aqr","ready","defaults","normalized","assign","fromVariables","concastSources","fetchQueryByPolicy","cleanupCancelFn","reason","setTimeout","includedQueriesById","lastDiff","getDiff","results","batch","onWatchUpdated","watch","watcher","indexOf","refetchWritePolicy","oldNetworkStatus","readCache","resultsFromCache","missing","fromData","partial","onlyRunForcedResolvers","resolved","resultsFromLink","shouldNotify","newContext"],"sources":["/Users/manjunathbandaru/deploy-graph-angular/node_modules/@apollo/client/core/QueryManager.js"],"sourcesContent":["import { __assign, __awaiter, __generator } from \"tslib\";\nimport { invariant, InvariantError } from \"../utilities/globals/index.js\";\nimport { equal } from '@wry/equality';\nimport { execute } from \"../link/core/index.js\";\nimport { isExecutionPatchIncrementalResult, isExecutionPatchResult, } from \"../utilities/common/incrementalResult.js\";\nimport { canonicalStringify } from \"../cache/index.js\";\nimport { getDefaultValues, getOperationDefinition, getOperationName, hasClientExports, graphQLResultHasError, getGraphQLErrorsFromResult, removeConnectionDirectiveFromDocument, canUseWeakMap, Observable, asyncMap, isNonEmptyArray, Concast, makeUniqueId, isDocumentNode, isNonNullObject, } from \"../utilities/index.js\";\nimport { mergeIncrementalData } from \"../utilities/common/incrementalResult.js\";\nimport { ApolloError, isApolloError } from \"../errors/index.js\";\nimport { ObservableQuery, logMissingFieldErrors } from \"./ObservableQuery.js\";\nimport { NetworkStatus, isNetworkRequestInFlight } from \"./networkStatus.js\";\nimport { LocalState } from \"./LocalState.js\";\nimport { QueryInfo, shouldWriteResult, } from \"./QueryInfo.js\";\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar QueryManager = (function () {\n    function QueryManager(_a) {\n        var cache = _a.cache, link = _a.link, defaultOptions = _a.defaultOptions, _b = _a.queryDeduplication, queryDeduplication = _b === void 0 ? false : _b, onBroadcast = _a.onBroadcast, _c = _a.ssrMode, ssrMode = _c === void 0 ? false : _c, _d = _a.clientAwareness, clientAwareness = _d === void 0 ? {} : _d, localState = _a.localState, assumeImmutableResults = _a.assumeImmutableResults;\n        this.clientAwareness = {};\n        this.queries = new Map();\n        this.fetchCancelFns = new Map();\n        this.transformCache = new (canUseWeakMap ? WeakMap : Map)();\n        this.queryIdCounter = 1;\n        this.requestIdCounter = 1;\n        this.mutationIdCounter = 1;\n        this.inFlightLinkObservables = new Map();\n        this.cache = cache;\n        this.link = link;\n        this.defaultOptions = defaultOptions || Object.create(null);\n        this.queryDeduplication = queryDeduplication;\n        this.clientAwareness = clientAwareness;\n        this.localState = localState || new LocalState({ cache: cache });\n        this.ssrMode = ssrMode;\n        this.assumeImmutableResults = !!assumeImmutableResults;\n        if ((this.onBroadcast = onBroadcast)) {\n            this.mutationStore = Object.create(null);\n        }\n    }\n    QueryManager.prototype.stop = function () {\n        var _this = this;\n        this.queries.forEach(function (_info, queryId) {\n            _this.stopQueryNoBroadcast(queryId);\n        });\n        this.cancelPendingFetches(__DEV__ ? new InvariantError('QueryManager stopped while query was in flight') : new InvariantError(14));\n    };\n    QueryManager.prototype.cancelPendingFetches = function (error) {\n        this.fetchCancelFns.forEach(function (cancel) { return cancel(error); });\n        this.fetchCancelFns.clear();\n    };\n    QueryManager.prototype.mutate = function (_a) {\n        var _b, _c;\n        var mutation = _a.mutation, variables = _a.variables, optimisticResponse = _a.optimisticResponse, updateQueries = _a.updateQueries, _d = _a.refetchQueries, refetchQueries = _d === void 0 ? [] : _d, _e = _a.awaitRefetchQueries, awaitRefetchQueries = _e === void 0 ? false : _e, updateWithProxyFn = _a.update, onQueryUpdated = _a.onQueryUpdated, _f = _a.fetchPolicy, fetchPolicy = _f === void 0 ? ((_b = this.defaultOptions.mutate) === null || _b === void 0 ? void 0 : _b.fetchPolicy) || \"network-only\" : _f, _g = _a.errorPolicy, errorPolicy = _g === void 0 ? ((_c = this.defaultOptions.mutate) === null || _c === void 0 ? void 0 : _c.errorPolicy) || \"none\" : _g, keepRootFields = _a.keepRootFields, context = _a.context;\n        return __awaiter(this, void 0, void 0, function () {\n            var mutationId, _h, document, hasClientExports, mutationStoreValue, self;\n            return __generator(this, function (_j) {\n                switch (_j.label) {\n                    case 0:\n                        __DEV__ ? invariant(mutation, 'mutation option is required. You must specify your GraphQL document in the mutation option.') : invariant(mutation, 15);\n                        __DEV__ ? invariant(fetchPolicy === 'network-only' ||\n                            fetchPolicy === 'no-cache', \"Mutations support only 'network-only' or 'no-cache' fetchPolicy strings. The default `network-only` behavior automatically writes mutation results to the cache. Passing `no-cache` skips the cache write.\") : invariant(fetchPolicy === 'network-only' ||\n                            fetchPolicy === 'no-cache', 16);\n                        mutationId = this.generateMutationId();\n                        _h = this.transform(mutation), document = _h.document, hasClientExports = _h.hasClientExports;\n                        mutation = this.cache.transformForLink(document);\n                        variables = this.getVariables(mutation, variables);\n                        if (!hasClientExports) return [3, 2];\n                        return [4, this.localState.addExportedVariables(mutation, variables, context)];\n                    case 1:\n                        variables = (_j.sent());\n                        _j.label = 2;\n                    case 2:\n                        mutationStoreValue = this.mutationStore &&\n                            (this.mutationStore[mutationId] = {\n                                mutation: mutation,\n                                variables: variables,\n                                loading: true,\n                                error: null,\n                            });\n                        if (optimisticResponse) {\n                            this.markMutationOptimistic(optimisticResponse, {\n                                mutationId: mutationId,\n                                document: mutation,\n                                variables: variables,\n                                fetchPolicy: fetchPolicy,\n                                errorPolicy: errorPolicy,\n                                context: context,\n                                updateQueries: updateQueries,\n                                update: updateWithProxyFn,\n                                keepRootFields: keepRootFields,\n                            });\n                        }\n                        this.broadcastQueries();\n                        self = this;\n                        return [2, new Promise(function (resolve, reject) {\n                                return asyncMap(self.getObservableFromLink(mutation, __assign(__assign({}, context), { optimisticResponse: optimisticResponse }), variables, false), function (result) {\n                                    if (graphQLResultHasError(result) && errorPolicy === 'none') {\n                                        throw new ApolloError({\n                                            graphQLErrors: getGraphQLErrorsFromResult(result),\n                                        });\n                                    }\n                                    if (mutationStoreValue) {\n                                        mutationStoreValue.loading = false;\n                                        mutationStoreValue.error = null;\n                                    }\n                                    var storeResult = __assign({}, result);\n                                    if (typeof refetchQueries === \"function\") {\n                                        refetchQueries = refetchQueries(storeResult);\n                                    }\n                                    if (errorPolicy === 'ignore' &&\n                                        graphQLResultHasError(storeResult)) {\n                                        delete storeResult.errors;\n                                    }\n                                    return self.markMutationResult({\n                                        mutationId: mutationId,\n                                        result: storeResult,\n                                        document: mutation,\n                                        variables: variables,\n                                        fetchPolicy: fetchPolicy,\n                                        errorPolicy: errorPolicy,\n                                        context: context,\n                                        update: updateWithProxyFn,\n                                        updateQueries: updateQueries,\n                                        awaitRefetchQueries: awaitRefetchQueries,\n                                        refetchQueries: refetchQueries,\n                                        removeOptimistic: optimisticResponse ? mutationId : void 0,\n                                        onQueryUpdated: onQueryUpdated,\n                                        keepRootFields: keepRootFields,\n                                    });\n                                }).subscribe({\n                                    next: function (storeResult) {\n                                        self.broadcastQueries();\n                                        if (!('hasNext' in storeResult) || storeResult.hasNext === false) {\n                                            resolve(storeResult);\n                                        }\n                                    },\n                                    error: function (err) {\n                                        if (mutationStoreValue) {\n                                            mutationStoreValue.loading = false;\n                                            mutationStoreValue.error = err;\n                                        }\n                                        if (optimisticResponse) {\n                                            self.cache.removeOptimistic(mutationId);\n                                        }\n                                        self.broadcastQueries();\n                                        reject(err instanceof ApolloError ? err : new ApolloError({\n                                            networkError: err,\n                                        }));\n                                    },\n                                });\n                            })];\n                }\n            });\n        });\n    };\n    QueryManager.prototype.markMutationResult = function (mutation, cache) {\n        var _this = this;\n        if (cache === void 0) { cache = this.cache; }\n        var result = mutation.result;\n        var cacheWrites = [];\n        var skipCache = mutation.fetchPolicy === \"no-cache\";\n        if (!skipCache && shouldWriteResult(result, mutation.errorPolicy)) {\n            if (!isExecutionPatchIncrementalResult(result)) {\n                cacheWrites.push({\n                    result: result.data,\n                    dataId: 'ROOT_MUTATION',\n                    query: mutation.document,\n                    variables: mutation.variables,\n                });\n            }\n            if (isExecutionPatchIncrementalResult(result) && isNonEmptyArray(result.incremental)) {\n                var diff = cache.diff({\n                    id: \"ROOT_MUTATION\",\n                    query: this.transform(mutation.document).asQuery,\n                    variables: mutation.variables,\n                    optimistic: false,\n                    returnPartialData: true,\n                });\n                var mergedData = void 0;\n                if (diff.result) {\n                    mergedData = mergeIncrementalData(diff.result, result);\n                }\n                if (typeof mergedData !== 'undefined') {\n                    result.data = mergedData;\n                    cacheWrites.push({\n                        result: mergedData,\n                        dataId: 'ROOT_MUTATION',\n                        query: mutation.document,\n                        variables: mutation.variables,\n                    });\n                }\n            }\n            var updateQueries_1 = mutation.updateQueries;\n            if (updateQueries_1) {\n                this.queries.forEach(function (_a, queryId) {\n                    var observableQuery = _a.observableQuery;\n                    var queryName = observableQuery && observableQuery.queryName;\n                    if (!queryName || !hasOwnProperty.call(updateQueries_1, queryName)) {\n                        return;\n                    }\n                    var updater = updateQueries_1[queryName];\n                    var _b = _this.queries.get(queryId), document = _b.document, variables = _b.variables;\n                    var _c = cache.diff({\n                        query: document,\n                        variables: variables,\n                        returnPartialData: true,\n                        optimistic: false,\n                    }), currentQueryResult = _c.result, complete = _c.complete;\n                    if (complete && currentQueryResult) {\n                        var nextQueryResult = updater(currentQueryResult, {\n                            mutationResult: result,\n                            queryName: document && getOperationName(document) || void 0,\n                            queryVariables: variables,\n                        });\n                        if (nextQueryResult) {\n                            cacheWrites.push({\n                                result: nextQueryResult,\n                                dataId: 'ROOT_QUERY',\n                                query: document,\n                                variables: variables,\n                            });\n                        }\n                    }\n                });\n            }\n        }\n        if (cacheWrites.length > 0 ||\n            mutation.refetchQueries ||\n            mutation.update ||\n            mutation.onQueryUpdated ||\n            mutation.removeOptimistic) {\n            var results_1 = [];\n            this.refetchQueries({\n                updateCache: function (cache) {\n                    if (!skipCache) {\n                        cacheWrites.forEach(function (write) { return cache.write(write); });\n                    }\n                    var update = mutation.update;\n                    var isFinalResult = !isExecutionPatchResult(result) ||\n                        (isExecutionPatchIncrementalResult(result) && !result.hasNext);\n                    if (update) {\n                        if (!skipCache) {\n                            var diff = cache.diff({\n                                id: \"ROOT_MUTATION\",\n                                query: _this.transform(mutation.document).asQuery,\n                                variables: mutation.variables,\n                                optimistic: false,\n                                returnPartialData: true,\n                            });\n                            if (diff.complete) {\n                                result = __assign(__assign({}, result), { data: diff.result });\n                                if ('incremental' in result) {\n                                    delete result.incremental;\n                                }\n                                if ('hasNext' in result) {\n                                    delete result.hasNext;\n                                }\n                            }\n                        }\n                        if (isFinalResult) {\n                            update(cache, result, {\n                                context: mutation.context,\n                                variables: mutation.variables,\n                            });\n                        }\n                    }\n                    if (!skipCache && !mutation.keepRootFields && isFinalResult) {\n                        cache.modify({\n                            id: 'ROOT_MUTATION',\n                            fields: function (value, _a) {\n                                var fieldName = _a.fieldName, DELETE = _a.DELETE;\n                                return fieldName === \"__typename\" ? value : DELETE;\n                            },\n                        });\n                    }\n                },\n                include: mutation.refetchQueries,\n                optimistic: false,\n                removeOptimistic: mutation.removeOptimistic,\n                onQueryUpdated: mutation.onQueryUpdated || null,\n            }).forEach(function (result) { return results_1.push(result); });\n            if (mutation.awaitRefetchQueries || mutation.onQueryUpdated) {\n                return Promise.all(results_1).then(function () { return result; });\n            }\n        }\n        return Promise.resolve(result);\n    };\n    QueryManager.prototype.markMutationOptimistic = function (optimisticResponse, mutation) {\n        var _this = this;\n        var data = typeof optimisticResponse === \"function\"\n            ? optimisticResponse(mutation.variables)\n            : optimisticResponse;\n        return this.cache.recordOptimisticTransaction(function (cache) {\n            try {\n                _this.markMutationResult(__assign(__assign({}, mutation), { result: { data: data } }), cache);\n            }\n            catch (error) {\n                __DEV__ && invariant.error(error);\n            }\n        }, mutation.mutationId);\n    };\n    QueryManager.prototype.fetchQuery = function (queryId, options, networkStatus) {\n        return this.fetchQueryObservable(queryId, options, networkStatus).promise;\n    };\n    QueryManager.prototype.getQueryStore = function () {\n        var store = Object.create(null);\n        this.queries.forEach(function (info, queryId) {\n            store[queryId] = {\n                variables: info.variables,\n                networkStatus: info.networkStatus,\n                networkError: info.networkError,\n                graphQLErrors: info.graphQLErrors,\n            };\n        });\n        return store;\n    };\n    QueryManager.prototype.resetErrors = function (queryId) {\n        var queryInfo = this.queries.get(queryId);\n        if (queryInfo) {\n            queryInfo.networkError = undefined;\n            queryInfo.graphQLErrors = [];\n        }\n    };\n    QueryManager.prototype.transform = function (document) {\n        var transformCache = this.transformCache;\n        if (!transformCache.has(document)) {\n            var transformed = this.cache.transformDocument(document);\n            var noConnection = removeConnectionDirectiveFromDocument(transformed);\n            var clientQuery = this.localState.clientQuery(transformed);\n            var serverQuery = noConnection && this.localState.serverQuery(noConnection);\n            var cacheEntry_1 = {\n                document: transformed,\n                hasClientExports: hasClientExports(transformed),\n                hasForcedResolvers: this.localState.shouldForceResolvers(transformed),\n                clientQuery: clientQuery,\n                serverQuery: serverQuery,\n                defaultVars: getDefaultValues(getOperationDefinition(transformed)),\n                asQuery: __assign(__assign({}, transformed), { definitions: transformed.definitions.map(function (def) {\n                        if (def.kind === \"OperationDefinition\" &&\n                            def.operation !== \"query\") {\n                            return __assign(__assign({}, def), { operation: \"query\" });\n                        }\n                        return def;\n                    }) })\n            };\n            var add = function (doc) {\n                if (doc && !transformCache.has(doc)) {\n                    transformCache.set(doc, cacheEntry_1);\n                }\n            };\n            add(document);\n            add(transformed);\n            add(clientQuery);\n            add(serverQuery);\n        }\n        return transformCache.get(document);\n    };\n    QueryManager.prototype.getVariables = function (document, variables) {\n        return __assign(__assign({}, this.transform(document).defaultVars), variables);\n    };\n    QueryManager.prototype.watchQuery = function (options) {\n        options = __assign(__assign({}, options), { variables: this.getVariables(options.query, options.variables) });\n        if (typeof options.notifyOnNetworkStatusChange === 'undefined') {\n            options.notifyOnNetworkStatusChange = false;\n        }\n        var queryInfo = new QueryInfo(this);\n        var observable = new ObservableQuery({\n            queryManager: this,\n            queryInfo: queryInfo,\n            options: options,\n        });\n        this.queries.set(observable.queryId, queryInfo);\n        queryInfo.init({\n            document: observable.query,\n            observableQuery: observable,\n            variables: observable.variables,\n        });\n        return observable;\n    };\n    QueryManager.prototype.query = function (options, queryId) {\n        var _this = this;\n        if (queryId === void 0) { queryId = this.generateQueryId(); }\n        __DEV__ ? invariant(options.query, 'query option is required. You must specify your GraphQL document ' +\n            'in the query option.') : invariant(options.query, 17);\n        __DEV__ ? invariant(options.query.kind === 'Document', 'You must wrap the query string in a \"gql\" tag.') : invariant(options.query.kind === 'Document', 18);\n        __DEV__ ? invariant(!options.returnPartialData, 'returnPartialData option only supported on watchQuery.') : invariant(!options.returnPartialData, 19);\n        __DEV__ ? invariant(!options.pollInterval, 'pollInterval option only supported on watchQuery.') : invariant(!options.pollInterval, 20);\n        return this.fetchQuery(queryId, options).finally(function () { return _this.stopQuery(queryId); });\n    };\n    QueryManager.prototype.generateQueryId = function () {\n        return String(this.queryIdCounter++);\n    };\n    QueryManager.prototype.generateRequestId = function () {\n        return this.requestIdCounter++;\n    };\n    QueryManager.prototype.generateMutationId = function () {\n        return String(this.mutationIdCounter++);\n    };\n    QueryManager.prototype.stopQueryInStore = function (queryId) {\n        this.stopQueryInStoreNoBroadcast(queryId);\n        this.broadcastQueries();\n    };\n    QueryManager.prototype.stopQueryInStoreNoBroadcast = function (queryId) {\n        var queryInfo = this.queries.get(queryId);\n        if (queryInfo)\n            queryInfo.stop();\n    };\n    QueryManager.prototype.clearStore = function (options) {\n        if (options === void 0) { options = {\n            discardWatches: true,\n        }; }\n        this.cancelPendingFetches(__DEV__ ? new InvariantError('Store reset while query was in flight (not completed in link chain)') : new InvariantError(21));\n        this.queries.forEach(function (queryInfo) {\n            if (queryInfo.observableQuery) {\n                queryInfo.networkStatus = NetworkStatus.loading;\n            }\n            else {\n                queryInfo.stop();\n            }\n        });\n        if (this.mutationStore) {\n            this.mutationStore = Object.create(null);\n        }\n        return this.cache.reset(options);\n    };\n    QueryManager.prototype.getObservableQueries = function (include) {\n        var _this = this;\n        if (include === void 0) { include = \"active\"; }\n        var queries = new Map();\n        var queryNamesAndDocs = new Map();\n        var legacyQueryOptions = new Set();\n        if (Array.isArray(include)) {\n            include.forEach(function (desc) {\n                if (typeof desc === \"string\") {\n                    queryNamesAndDocs.set(desc, false);\n                }\n                else if (isDocumentNode(desc)) {\n                    queryNamesAndDocs.set(_this.transform(desc).document, false);\n                }\n                else if (isNonNullObject(desc) && desc.query) {\n                    legacyQueryOptions.add(desc);\n                }\n            });\n        }\n        this.queries.forEach(function (_a, queryId) {\n            var oq = _a.observableQuery, document = _a.document;\n            if (oq) {\n                if (include === \"all\") {\n                    queries.set(queryId, oq);\n                    return;\n                }\n                var queryName = oq.queryName, fetchPolicy = oq.options.fetchPolicy;\n                if (fetchPolicy === \"standby\" ||\n                    (include === \"active\" && !oq.hasObservers())) {\n                    return;\n                }\n                if (include === \"active\" ||\n                    (queryName && queryNamesAndDocs.has(queryName)) ||\n                    (document && queryNamesAndDocs.has(document))) {\n                    queries.set(queryId, oq);\n                    if (queryName)\n                        queryNamesAndDocs.set(queryName, true);\n                    if (document)\n                        queryNamesAndDocs.set(document, true);\n                }\n            }\n        });\n        if (legacyQueryOptions.size) {\n            legacyQueryOptions.forEach(function (options) {\n                var queryId = makeUniqueId(\"legacyOneTimeQuery\");\n                var queryInfo = _this.getQuery(queryId).init({\n                    document: options.query,\n                    variables: options.variables,\n                });\n                var oq = new ObservableQuery({\n                    queryManager: _this,\n                    queryInfo: queryInfo,\n                    options: __assign(__assign({}, options), { fetchPolicy: \"network-only\" }),\n                });\n                invariant(oq.queryId === queryId);\n                queryInfo.setObservableQuery(oq);\n                queries.set(queryId, oq);\n            });\n        }\n        if (__DEV__ && queryNamesAndDocs.size) {\n            queryNamesAndDocs.forEach(function (included, nameOrDoc) {\n                if (!included) {\n                    __DEV__ && invariant.warn(\"Unknown query \".concat(typeof nameOrDoc === \"string\" ? \"named \" : \"\").concat(JSON.stringify(nameOrDoc, null, 2), \" requested in refetchQueries options.include array\"));\n                }\n            });\n        }\n        return queries;\n    };\n    QueryManager.prototype.reFetchObservableQueries = function (includeStandby) {\n        var _this = this;\n        if (includeStandby === void 0) { includeStandby = false; }\n        var observableQueryPromises = [];\n        this.getObservableQueries(includeStandby ? \"all\" : \"active\").forEach(function (observableQuery, queryId) {\n            var fetchPolicy = observableQuery.options.fetchPolicy;\n            observableQuery.resetLastResults();\n            if (includeStandby ||\n                (fetchPolicy !== \"standby\" &&\n                    fetchPolicy !== \"cache-only\")) {\n                observableQueryPromises.push(observableQuery.refetch());\n            }\n            _this.getQuery(queryId).setDiff(null);\n        });\n        this.broadcastQueries();\n        return Promise.all(observableQueryPromises);\n    };\n    QueryManager.prototype.setObservableQuery = function (observableQuery) {\n        this.getQuery(observableQuery.queryId).setObservableQuery(observableQuery);\n    };\n    QueryManager.prototype.startGraphQLSubscription = function (_a) {\n        var _this = this;\n        var query = _a.query, fetchPolicy = _a.fetchPolicy, errorPolicy = _a.errorPolicy, variables = _a.variables, _b = _a.context, context = _b === void 0 ? {} : _b;\n        query = this.transform(query).document;\n        variables = this.getVariables(query, variables);\n        var makeObservable = function (variables) {\n            return _this.getObservableFromLink(query, context, variables).map(function (result) {\n                if (fetchPolicy !== 'no-cache') {\n                    if (shouldWriteResult(result, errorPolicy)) {\n                        _this.cache.write({\n                            query: query,\n                            result: result.data,\n                            dataId: 'ROOT_SUBSCRIPTION',\n                            variables: variables,\n                        });\n                    }\n                    _this.broadcastQueries();\n                }\n                if (graphQLResultHasError(result)) {\n                    throw new ApolloError({\n                        graphQLErrors: result.errors,\n                    });\n                }\n                return result;\n            });\n        };\n        if (this.transform(query).hasClientExports) {\n            var observablePromise_1 = this.localState.addExportedVariables(query, variables, context).then(makeObservable);\n            return new Observable(function (observer) {\n                var sub = null;\n                observablePromise_1.then(function (observable) { return sub = observable.subscribe(observer); }, observer.error);\n                return function () { return sub && sub.unsubscribe(); };\n            });\n        }\n        return makeObservable(variables);\n    };\n    QueryManager.prototype.stopQuery = function (queryId) {\n        this.stopQueryNoBroadcast(queryId);\n        this.broadcastQueries();\n    };\n    QueryManager.prototype.stopQueryNoBroadcast = function (queryId) {\n        this.stopQueryInStoreNoBroadcast(queryId);\n        this.removeQuery(queryId);\n    };\n    QueryManager.prototype.removeQuery = function (queryId) {\n        this.fetchCancelFns.delete(queryId);\n        if (this.queries.has(queryId)) {\n            this.getQuery(queryId).stop();\n            this.queries.delete(queryId);\n        }\n    };\n    QueryManager.prototype.broadcastQueries = function () {\n        if (this.onBroadcast)\n            this.onBroadcast();\n        this.queries.forEach(function (info) { return info.notify(); });\n    };\n    QueryManager.prototype.getLocalState = function () {\n        return this.localState;\n    };\n    QueryManager.prototype.getObservableFromLink = function (query, context, variables, deduplication) {\n        var _this = this;\n        var _a;\n        if (deduplication === void 0) { deduplication = (_a = context === null || context === void 0 ? void 0 : context.queryDeduplication) !== null && _a !== void 0 ? _a : this.queryDeduplication; }\n        var observable;\n        var serverQuery = this.transform(query).serverQuery;\n        if (serverQuery) {\n            var _b = this, inFlightLinkObservables_1 = _b.inFlightLinkObservables, link = _b.link;\n            var operation = {\n                query: serverQuery,\n                variables: variables,\n                operationName: getOperationName(serverQuery) || void 0,\n                context: this.prepareContext(__assign(__assign({}, context), { forceFetch: !deduplication })),\n            };\n            context = operation.context;\n            if (deduplication) {\n                var byVariables_1 = inFlightLinkObservables_1.get(serverQuery) || new Map();\n                inFlightLinkObservables_1.set(serverQuery, byVariables_1);\n                var varJson_1 = canonicalStringify(variables);\n                observable = byVariables_1.get(varJson_1);\n                if (!observable) {\n                    var concast = new Concast([\n                        execute(link, operation)\n                    ]);\n                    byVariables_1.set(varJson_1, observable = concast);\n                    concast.beforeNext(function () {\n                        if (byVariables_1.delete(varJson_1) &&\n                            byVariables_1.size < 1) {\n                            inFlightLinkObservables_1.delete(serverQuery);\n                        }\n                    });\n                }\n            }\n            else {\n                observable = new Concast([\n                    execute(link, operation)\n                ]);\n            }\n        }\n        else {\n            observable = new Concast([\n                Observable.of({ data: {} })\n            ]);\n            context = this.prepareContext(context);\n        }\n        var clientQuery = this.transform(query).clientQuery;\n        if (clientQuery) {\n            observable = asyncMap(observable, function (result) {\n                return _this.localState.runResolvers({\n                    document: clientQuery,\n                    remoteResult: result,\n                    context: context,\n                    variables: variables,\n                });\n            });\n        }\n        return observable;\n    };\n    QueryManager.prototype.getResultsFromLink = function (queryInfo, cacheWriteBehavior, options) {\n        var requestId = queryInfo.lastRequestId = this.generateRequestId();\n        var linkDocument = this.cache.transformForLink(this.transform(queryInfo.document).document);\n        return asyncMap(this.getObservableFromLink(linkDocument, options.context, options.variables), function (result) {\n            var graphQLErrors = getGraphQLErrorsFromResult(result);\n            var hasErrors = graphQLErrors.length > 0;\n            if (requestId >= queryInfo.lastRequestId) {\n                if (hasErrors && options.errorPolicy === \"none\") {\n                    throw queryInfo.markError(new ApolloError({\n                        graphQLErrors: graphQLErrors,\n                    }));\n                }\n                queryInfo.markResult(result, linkDocument, options, cacheWriteBehavior);\n                queryInfo.markReady();\n            }\n            var aqr = {\n                data: result.data,\n                loading: false,\n                networkStatus: NetworkStatus.ready,\n            };\n            if (hasErrors && options.errorPolicy !== \"ignore\") {\n                aqr.errors = graphQLErrors;\n                aqr.networkStatus = NetworkStatus.error;\n            }\n            return aqr;\n        }, function (networkError) {\n            var error = isApolloError(networkError)\n                ? networkError\n                : new ApolloError({ networkError: networkError });\n            if (requestId >= queryInfo.lastRequestId) {\n                queryInfo.markError(error);\n            }\n            throw error;\n        });\n    };\n    QueryManager.prototype.fetchQueryObservable = function (queryId, options, networkStatus) {\n        var _this = this;\n        if (networkStatus === void 0) { networkStatus = NetworkStatus.loading; }\n        var query = this.transform(options.query).document;\n        var variables = this.getVariables(query, options.variables);\n        var queryInfo = this.getQuery(queryId);\n        var defaults = this.defaultOptions.watchQuery;\n        var _a = options.fetchPolicy, fetchPolicy = _a === void 0 ? defaults && defaults.fetchPolicy || \"cache-first\" : _a, _b = options.errorPolicy, errorPolicy = _b === void 0 ? defaults && defaults.errorPolicy || \"none\" : _b, _c = options.returnPartialData, returnPartialData = _c === void 0 ? false : _c, _d = options.notifyOnNetworkStatusChange, notifyOnNetworkStatusChange = _d === void 0 ? false : _d, _e = options.context, context = _e === void 0 ? {} : _e;\n        var normalized = Object.assign({}, options, {\n            query: query,\n            variables: variables,\n            fetchPolicy: fetchPolicy,\n            errorPolicy: errorPolicy,\n            returnPartialData: returnPartialData,\n            notifyOnNetworkStatusChange: notifyOnNetworkStatusChange,\n            context: context,\n        });\n        var fromVariables = function (variables) {\n            normalized.variables = variables;\n            var concastSources = _this.fetchQueryByPolicy(queryInfo, normalized, networkStatus);\n            if (normalized.fetchPolicy !== \"standby\" &&\n                concastSources.length > 0 &&\n                queryInfo.observableQuery) {\n                queryInfo.observableQuery[\"applyNextFetchPolicy\"](\"after-fetch\", options);\n            }\n            return concastSources;\n        };\n        var cleanupCancelFn = function () { return _this.fetchCancelFns.delete(queryId); };\n        this.fetchCancelFns.set(queryId, function (reason) {\n            cleanupCancelFn();\n            setTimeout(function () { return concast.cancel(reason); });\n        });\n        var concast = new Concast(this.transform(normalized.query).hasClientExports\n            ? this.localState.addExportedVariables(normalized.query, normalized.variables, normalized.context).then(fromVariables)\n            : fromVariables(normalized.variables));\n        concast.promise.then(cleanupCancelFn, cleanupCancelFn);\n        return concast;\n    };\n    QueryManager.prototype.refetchQueries = function (_a) {\n        var _this = this;\n        var updateCache = _a.updateCache, include = _a.include, _b = _a.optimistic, optimistic = _b === void 0 ? false : _b, _c = _a.removeOptimistic, removeOptimistic = _c === void 0 ? optimistic ? makeUniqueId(\"refetchQueries\") : void 0 : _c, onQueryUpdated = _a.onQueryUpdated;\n        var includedQueriesById = new Map();\n        if (include) {\n            this.getObservableQueries(include).forEach(function (oq, queryId) {\n                includedQueriesById.set(queryId, {\n                    oq: oq,\n                    lastDiff: _this.getQuery(queryId).getDiff(),\n                });\n            });\n        }\n        var results = new Map;\n        if (updateCache) {\n            this.cache.batch({\n                update: updateCache,\n                optimistic: optimistic && removeOptimistic || false,\n                removeOptimistic: removeOptimistic,\n                onWatchUpdated: function (watch, diff, lastDiff) {\n                    var oq = watch.watcher instanceof QueryInfo &&\n                        watch.watcher.observableQuery;\n                    if (oq) {\n                        if (onQueryUpdated) {\n                            includedQueriesById.delete(oq.queryId);\n                            var result = onQueryUpdated(oq, diff, lastDiff);\n                            if (result === true) {\n                                result = oq.refetch();\n                            }\n                            if (result !== false) {\n                                results.set(oq, result);\n                            }\n                            return result;\n                        }\n                        if (onQueryUpdated !== null) {\n                            includedQueriesById.set(oq.queryId, { oq: oq, lastDiff: lastDiff, diff: diff });\n                        }\n                    }\n                },\n            });\n        }\n        if (includedQueriesById.size) {\n            includedQueriesById.forEach(function (_a, queryId) {\n                var oq = _a.oq, lastDiff = _a.lastDiff, diff = _a.diff;\n                var result;\n                if (onQueryUpdated) {\n                    if (!diff) {\n                        var info = oq[\"queryInfo\"];\n                        info.reset();\n                        diff = info.getDiff();\n                    }\n                    result = onQueryUpdated(oq, diff, lastDiff);\n                }\n                if (!onQueryUpdated || result === true) {\n                    result = oq.refetch();\n                }\n                if (result !== false) {\n                    results.set(oq, result);\n                }\n                if (queryId.indexOf(\"legacyOneTimeQuery\") >= 0) {\n                    _this.stopQueryNoBroadcast(queryId);\n                }\n            });\n        }\n        if (removeOptimistic) {\n            this.cache.removeOptimistic(removeOptimistic);\n        }\n        return results;\n    };\n    QueryManager.prototype.fetchQueryByPolicy = function (queryInfo, _a, networkStatus) {\n        var _this = this;\n        var query = _a.query, variables = _a.variables, fetchPolicy = _a.fetchPolicy, refetchWritePolicy = _a.refetchWritePolicy, errorPolicy = _a.errorPolicy, returnPartialData = _a.returnPartialData, context = _a.context, notifyOnNetworkStatusChange = _a.notifyOnNetworkStatusChange;\n        var oldNetworkStatus = queryInfo.networkStatus;\n        queryInfo.init({\n            document: this.transform(query).document,\n            variables: variables,\n            networkStatus: networkStatus,\n        });\n        var readCache = function () { return queryInfo.getDiff(variables); };\n        var resultsFromCache = function (diff, networkStatus) {\n            if (networkStatus === void 0) { networkStatus = queryInfo.networkStatus || NetworkStatus.loading; }\n            var data = diff.result;\n            if (__DEV__ &&\n                !returnPartialData &&\n                !equal(data, {})) {\n                logMissingFieldErrors(diff.missing);\n            }\n            var fromData = function (data) { return Observable.of(__assign({ data: data, loading: isNetworkRequestInFlight(networkStatus), networkStatus: networkStatus }, (diff.complete ? null : { partial: true }))); };\n            if (data && _this.transform(query).hasForcedResolvers) {\n                return _this.localState.runResolvers({\n                    document: query,\n                    remoteResult: { data: data },\n                    context: context,\n                    variables: variables,\n                    onlyRunForcedResolvers: true,\n                }).then(function (resolved) { return fromData(resolved.data || void 0); });\n            }\n            if (errorPolicy === 'none' &&\n                networkStatus === NetworkStatus.refetch &&\n                Array.isArray(diff.missing)) {\n                return fromData(void 0);\n            }\n            return fromData(data);\n        };\n        var cacheWriteBehavior = fetchPolicy === \"no-cache\" ? 0 :\n            (networkStatus === NetworkStatus.refetch &&\n                refetchWritePolicy !== \"merge\") ? 1\n                : 2;\n        var resultsFromLink = function () { return _this.getResultsFromLink(queryInfo, cacheWriteBehavior, {\n            variables: variables,\n            context: context,\n            fetchPolicy: fetchPolicy,\n            errorPolicy: errorPolicy,\n        }); };\n        var shouldNotify = notifyOnNetworkStatusChange &&\n            typeof oldNetworkStatus === \"number\" &&\n            oldNetworkStatus !== networkStatus &&\n            isNetworkRequestInFlight(networkStatus);\n        switch (fetchPolicy) {\n            default:\n            case \"cache-first\": {\n                var diff = readCache();\n                if (diff.complete) {\n                    return [\n                        resultsFromCache(diff, queryInfo.markReady()),\n                    ];\n                }\n                if (returnPartialData || shouldNotify) {\n                    return [\n                        resultsFromCache(diff),\n                        resultsFromLink(),\n                    ];\n                }\n                return [\n                    resultsFromLink(),\n                ];\n            }\n            case \"cache-and-network\": {\n                var diff = readCache();\n                if (diff.complete || returnPartialData || shouldNotify) {\n                    return [\n                        resultsFromCache(diff),\n                        resultsFromLink(),\n                    ];\n                }\n                return [\n                    resultsFromLink(),\n                ];\n            }\n            case \"cache-only\":\n                return [\n                    resultsFromCache(readCache(), queryInfo.markReady()),\n                ];\n            case \"network-only\":\n                if (shouldNotify) {\n                    return [\n                        resultsFromCache(readCache()),\n                        resultsFromLink(),\n                    ];\n                }\n                return [resultsFromLink()];\n            case \"no-cache\":\n                if (shouldNotify) {\n                    return [\n                        resultsFromCache(queryInfo.getDiff()),\n                        resultsFromLink(),\n                    ];\n                }\n                return [resultsFromLink()];\n            case \"standby\":\n                return [];\n        }\n    };\n    QueryManager.prototype.getQuery = function (queryId) {\n        if (queryId && !this.queries.has(queryId)) {\n            this.queries.set(queryId, new QueryInfo(this, queryId));\n        }\n        return this.queries.get(queryId);\n    };\n    QueryManager.prototype.prepareContext = function (context) {\n        if (context === void 0) { context = {}; }\n        var newContext = this.localState.prepareContext(context);\n        return __assign(__assign({}, newContext), { clientAwareness: this.clientAwareness });\n    };\n    return QueryManager;\n}());\nexport { QueryManager };\n"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AACxD,SAASC,SAAS,EAAEC,cAAc,QAAQ,+BAA+B;AACzE,SAASC,KAAK,QAAQ,eAAe;AACrC,SAASC,OAAO,QAAQ,uBAAuB;AAC/C,SAASC,iCAAiC,EAAEC,sBAAsB,QAAS,0CAA0C;AACrH,SAASC,kBAAkB,QAAQ,mBAAmB;AACtD,SAASC,gBAAgB,EAAEC,sBAAsB,EAAEC,gBAAgB,EAAEC,gBAAgB,EAAEC,qBAAqB,EAAEC,0BAA0B,EAAEC,qCAAqC,EAAEC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,eAAe,EAAEC,OAAO,EAAEC,YAAY,EAAEC,cAAc,EAAEC,eAAe,QAAS,uBAAuB;AAC7T,SAASC,oBAAoB,QAAQ,0CAA0C;AAC/E,SAASC,WAAW,EAAEC,aAAa,QAAQ,oBAAoB;AAC/D,SAASC,eAAe,EAAEC,qBAAqB,QAAQ,sBAAsB;AAC7E,SAASC,aAAa,EAAEC,wBAAwB,QAAQ,oBAAoB;AAC5E,SAASC,UAAU,QAAQ,iBAAiB;AAC5C,SAASC,SAAS,EAAEC,iBAAiB,QAAS,gBAAgB;AAC9D,IAAIC,cAAc,GAAGC,MAAM,CAACC,SAAS,CAACF,cAAc;AACpD,IAAIG,YAAY,GAAI,YAAY;EAC5B,SAASA,YAAY,CAACC,EAAE,EAAE;IACtB,IAAIC,KAAK,GAAGD,EAAE,CAACC,KAAK;MAAEC,IAAI,GAAGF,EAAE,CAACE,IAAI;MAAEC,cAAc,GAAGH,EAAE,CAACG,cAAc;MAAEC,EAAE,GAAGJ,EAAE,CAACK,kBAAkB;MAAEA,kBAAkB,GAAGD,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,GAAGA,EAAE;MAAEE,WAAW,GAAGN,EAAE,CAACM,WAAW;MAAEC,EAAE,GAAGP,EAAE,CAACQ,OAAO;MAAEA,OAAO,GAAGD,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,GAAGA,EAAE;MAAEE,EAAE,GAAGT,EAAE,CAACU,eAAe;MAAEA,eAAe,GAAGD,EAAE,KAAK,KAAK,CAAC,GAAG,CAAC,CAAC,GAAGA,EAAE;MAAEE,UAAU,GAAGX,EAAE,CAACW,UAAU;MAAEC,sBAAsB,GAAGZ,EAAE,CAACY,sBAAsB;IAC9X,IAAI,CAACF,eAAe,GAAG,CAAC,CAAC;IACzB,IAAI,CAACG,OAAO,GAAG,IAAIC,GAAG,EAAE;IACxB,IAAI,CAACC,cAAc,GAAG,IAAID,GAAG,EAAE;IAC/B,IAAI,CAACE,cAAc,GAAG,KAAKtC,aAAa,GAAGuC,OAAO,GAAGH,GAAG,GAAG;IAC3D,IAAI,CAACI,cAAc,GAAG,CAAC;IACvB,IAAI,CAACC,gBAAgB,GAAG,CAAC;IACzB,IAAI,CAACC,iBAAiB,GAAG,CAAC;IAC1B,IAAI,CAACC,uBAAuB,GAAG,IAAIP,GAAG,EAAE;IACxC,IAAI,CAACb,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,cAAc,GAAGA,cAAc,IAAIN,MAAM,CAACyB,MAAM,CAAC,IAAI,CAAC;IAC3D,IAAI,CAACjB,kBAAkB,GAAGA,kBAAkB;IAC5C,IAAI,CAACK,eAAe,GAAGA,eAAe;IACtC,IAAI,CAACC,UAAU,GAAGA,UAAU,IAAI,IAAIlB,UAAU,CAAC;MAAEQ,KAAK,EAAEA;IAAM,CAAC,CAAC;IAChE,IAAI,CAACO,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACI,sBAAsB,GAAG,CAAC,CAACA,sBAAsB;IACtD,IAAK,IAAI,CAACN,WAAW,GAAGA,WAAW,EAAG;MAClC,IAAI,CAACiB,aAAa,GAAG1B,MAAM,CAACyB,MAAM,CAAC,IAAI,CAAC;IAC5C;EACJ;EACAvB,YAAY,CAACD,SAAS,CAAC0B,IAAI,GAAG,YAAY;IACtC,IAAIC,KAAK,GAAG,IAAI;IAChB,IAAI,CAACZ,OAAO,CAACa,OAAO,CAAC,UAAUC,KAAK,EAAEC,OAAO,EAAE;MAC3CH,KAAK,CAACI,oBAAoB,CAACD,OAAO,CAAC;IACvC,CAAC,CAAC;IACF,IAAI,CAACE,oBAAoB,CAACC,OAAO,GAAG,IAAIlE,cAAc,CAAC,gDAAgD,CAAC,GAAG,IAAIA,cAAc,CAAC,EAAE,CAAC,CAAC;EACtI,CAAC;EACDkC,YAAY,CAACD,SAAS,CAACgC,oBAAoB,GAAG,UAAUE,KAAK,EAAE;IAC3D,IAAI,CAACjB,cAAc,CAACW,OAAO,CAAC,UAAUO,MAAM,EAAE;MAAE,OAAOA,MAAM,CAACD,KAAK,CAAC;IAAE,CAAC,CAAC;IACxE,IAAI,CAACjB,cAAc,CAACmB,KAAK,EAAE;EAC/B,CAAC;EACDnC,YAAY,CAACD,SAAS,CAACqC,MAAM,GAAG,UAAUnC,EAAE,EAAE;IAC1C,IAAII,EAAE,EAAEG,EAAE;IACV,IAAI6B,QAAQ,GAAGpC,EAAE,CAACoC,QAAQ;MAAEC,SAAS,GAAGrC,EAAE,CAACqC,SAAS;MAAEC,kBAAkB,GAAGtC,EAAE,CAACsC,kBAAkB;MAAEC,aAAa,GAAGvC,EAAE,CAACuC,aAAa;MAAE9B,EAAE,GAAGT,EAAE,CAACwC,cAAc;MAAEA,cAAc,GAAG/B,EAAE,KAAK,KAAK,CAAC,GAAG,EAAE,GAAGA,EAAE;MAAEgC,EAAE,GAAGzC,EAAE,CAAC0C,mBAAmB;MAAEA,mBAAmB,GAAGD,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,GAAGA,EAAE;MAAEE,iBAAiB,GAAG3C,EAAE,CAAC4C,MAAM;MAAEC,cAAc,GAAG7C,EAAE,CAAC6C,cAAc;MAAEC,EAAE,GAAG9C,EAAE,CAAC+C,WAAW;MAAEA,WAAW,GAAGD,EAAE,KAAK,KAAK,CAAC,GAAG,CAAC,CAAC1C,EAAE,GAAG,IAAI,CAACD,cAAc,CAACgC,MAAM,MAAM,IAAI,IAAI/B,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAAC2C,WAAW,KAAK,cAAc,GAAGD,EAAE;MAAEE,EAAE,GAAGhD,EAAE,CAACiD,WAAW;MAAEA,WAAW,GAAGD,EAAE,KAAK,KAAK,CAAC,GAAG,CAAC,CAACzC,EAAE,GAAG,IAAI,CAACJ,cAAc,CAACgC,MAAM,MAAM,IAAI,IAAI5B,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAAC0C,WAAW,KAAK,MAAM,GAAGD,EAAE;MAAEE,cAAc,GAAGlD,EAAE,CAACkD,cAAc;MAAEC,OAAO,GAAGnD,EAAE,CAACmD,OAAO;IAC9sB,OAAOzF,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,YAAY;MAC/C,IAAI0F,UAAU,EAAEC,EAAE,EAAEC,QAAQ,EAAEhF,gBAAgB,EAAEiF,kBAAkB,EAAEC,IAAI;MACxE,OAAO7F,WAAW,CAAC,IAAI,EAAE,UAAU8F,EAAE,EAAE;QACnC,QAAQA,EAAE,CAACC,KAAK;UACZ,KAAK,CAAC;YACF3B,OAAO,GAAGnE,SAAS,CAACwE,QAAQ,EAAE,6FAA6F,CAAC,GAAGxE,SAAS,CAACwE,QAAQ,EAAE,EAAE,CAAC;YACtJL,OAAO,GAAGnE,SAAS,CAACmF,WAAW,KAAK,cAAc,IAC9CA,WAAW,KAAK,UAAU,EAAE,4MAA4M,CAAC,GAAGnF,SAAS,CAACmF,WAAW,KAAK,cAAc,IACpRA,WAAW,KAAK,UAAU,EAAE,EAAE,CAAC;YACnCK,UAAU,GAAG,IAAI,CAACO,kBAAkB,EAAE;YACtCN,EAAE,GAAG,IAAI,CAACO,SAAS,CAACxB,QAAQ,CAAC,EAAEkB,QAAQ,GAAGD,EAAE,CAACC,QAAQ,EAAEhF,gBAAgB,GAAG+E,EAAE,CAAC/E,gBAAgB;YAC7F8D,QAAQ,GAAG,IAAI,CAACnC,KAAK,CAAC4D,gBAAgB,CAACP,QAAQ,CAAC;YAChDjB,SAAS,GAAG,IAAI,CAACyB,YAAY,CAAC1B,QAAQ,EAAEC,SAAS,CAAC;YAClD,IAAI,CAAC/D,gBAAgB,EAAE,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC;YACpC,OAAO,CAAC,CAAC,EAAE,IAAI,CAACqC,UAAU,CAACoD,oBAAoB,CAAC3B,QAAQ,EAAEC,SAAS,EAAEc,OAAO,CAAC,CAAC;UAClF,KAAK,CAAC;YACFd,SAAS,GAAIoB,EAAE,CAACO,IAAI,EAAG;YACvBP,EAAE,CAACC,KAAK,GAAG,CAAC;UAChB,KAAK,CAAC;YACFH,kBAAkB,GAAG,IAAI,CAAChC,aAAa,KAClC,IAAI,CAACA,aAAa,CAAC6B,UAAU,CAAC,GAAG;cAC9BhB,QAAQ,EAAEA,QAAQ;cAClBC,SAAS,EAAEA,SAAS;cACpB4B,OAAO,EAAE,IAAI;cACbjC,KAAK,EAAE;YACX,CAAC,CAAC;YACN,IAAIM,kBAAkB,EAAE;cACpB,IAAI,CAAC4B,sBAAsB,CAAC5B,kBAAkB,EAAE;gBAC5Cc,UAAU,EAAEA,UAAU;gBACtBE,QAAQ,EAAElB,QAAQ;gBAClBC,SAAS,EAAEA,SAAS;gBACpBU,WAAW,EAAEA,WAAW;gBACxBE,WAAW,EAAEA,WAAW;gBACxBE,OAAO,EAAEA,OAAO;gBAChBZ,aAAa,EAAEA,aAAa;gBAC5BK,MAAM,EAAED,iBAAiB;gBACzBO,cAAc,EAAEA;cACpB,CAAC,CAAC;YACN;YACA,IAAI,CAACiB,gBAAgB,EAAE;YACvBX,IAAI,GAAG,IAAI;YACX,OAAO,CAAC,CAAC,EAAE,IAAIY,OAAO,CAAC,UAAUC,OAAO,EAAEC,MAAM,EAAE;cAC1C,OAAO1F,QAAQ,CAAC4E,IAAI,CAACe,qBAAqB,CAACnC,QAAQ,EAAE3E,QAAQ,CAACA,QAAQ,CAAC,CAAC,CAAC,EAAE0F,OAAO,CAAC,EAAE;gBAAEb,kBAAkB,EAAEA;cAAmB,CAAC,CAAC,EAAED,SAAS,EAAE,KAAK,CAAC,EAAE,UAAUmC,MAAM,EAAE;gBACnK,IAAIjG,qBAAqB,CAACiG,MAAM,CAAC,IAAIvB,WAAW,KAAK,MAAM,EAAE;kBACzD,MAAM,IAAI9D,WAAW,CAAC;oBAClBsF,aAAa,EAAEjG,0BAA0B,CAACgG,MAAM;kBACpD,CAAC,CAAC;gBACN;gBACA,IAAIjB,kBAAkB,EAAE;kBACpBA,kBAAkB,CAACU,OAAO,GAAG,KAAK;kBAClCV,kBAAkB,CAACvB,KAAK,GAAG,IAAI;gBACnC;gBACA,IAAI0C,WAAW,GAAGjH,QAAQ,CAAC,CAAC,CAAC,EAAE+G,MAAM,CAAC;gBACtC,IAAI,OAAOhC,cAAc,KAAK,UAAU,EAAE;kBACtCA,cAAc,GAAGA,cAAc,CAACkC,WAAW,CAAC;gBAChD;gBACA,IAAIzB,WAAW,KAAK,QAAQ,IACxB1E,qBAAqB,CAACmG,WAAW,CAAC,EAAE;kBACpC,OAAOA,WAAW,CAACC,MAAM;gBAC7B;gBACA,OAAOnB,IAAI,CAACoB,kBAAkB,CAAC;kBAC3BxB,UAAU,EAAEA,UAAU;kBACtBoB,MAAM,EAAEE,WAAW;kBACnBpB,QAAQ,EAAElB,QAAQ;kBAClBC,SAAS,EAAEA,SAAS;kBACpBU,WAAW,EAAEA,WAAW;kBACxBE,WAAW,EAAEA,WAAW;kBACxBE,OAAO,EAAEA,OAAO;kBAChBP,MAAM,EAAED,iBAAiB;kBACzBJ,aAAa,EAAEA,aAAa;kBAC5BG,mBAAmB,EAAEA,mBAAmB;kBACxCF,cAAc,EAAEA,cAAc;kBAC9BqC,gBAAgB,EAAEvC,kBAAkB,GAAGc,UAAU,GAAG,KAAK,CAAC;kBAC1DP,cAAc,EAAEA,cAAc;kBAC9BK,cAAc,EAAEA;gBACpB,CAAC,CAAC;cACN,CAAC,CAAC,CAAC4B,SAAS,CAAC;gBACTC,IAAI,EAAE,UAAUL,WAAW,EAAE;kBACzBlB,IAAI,CAACW,gBAAgB,EAAE;kBACvB,IAAI,EAAE,SAAS,IAAIO,WAAW,CAAC,IAAIA,WAAW,CAACM,OAAO,KAAK,KAAK,EAAE;oBAC9DX,OAAO,CAACK,WAAW,CAAC;kBACxB;gBACJ,CAAC;gBACD1C,KAAK,EAAE,UAAUiD,GAAG,EAAE;kBAClB,IAAI1B,kBAAkB,EAAE;oBACpBA,kBAAkB,CAACU,OAAO,GAAG,KAAK;oBAClCV,kBAAkB,CAACvB,KAAK,GAAGiD,GAAG;kBAClC;kBACA,IAAI3C,kBAAkB,EAAE;oBACpBkB,IAAI,CAACvD,KAAK,CAAC4E,gBAAgB,CAACzB,UAAU,CAAC;kBAC3C;kBACAI,IAAI,CAACW,gBAAgB,EAAE;kBACvBG,MAAM,CAACW,GAAG,YAAY9F,WAAW,GAAG8F,GAAG,GAAG,IAAI9F,WAAW,CAAC;oBACtD+F,YAAY,EAAED;kBAClB,CAAC,CAAC,CAAC;gBACP;cACJ,CAAC,CAAC;YACN,CAAC,CAAC,CAAC;QAAC;MAEpB,CAAC,CAAC;IACN,CAAC,CAAC;EACN,CAAC;EACDlF,YAAY,CAACD,SAAS,CAAC8E,kBAAkB,GAAG,UAAUxC,QAAQ,EAAEnC,KAAK,EAAE;IACnE,IAAIwB,KAAK,GAAG,IAAI;IAChB,IAAIxB,KAAK,KAAK,KAAK,CAAC,EAAE;MAAEA,KAAK,GAAG,IAAI,CAACA,KAAK;IAAE;IAC5C,IAAIuE,MAAM,GAAGpC,QAAQ,CAACoC,MAAM;IAC5B,IAAIW,WAAW,GAAG,EAAE;IACpB,IAAIC,SAAS,GAAGhD,QAAQ,CAACW,WAAW,KAAK,UAAU;IACnD,IAAI,CAACqC,SAAS,IAAIzF,iBAAiB,CAAC6E,MAAM,EAAEpC,QAAQ,CAACa,WAAW,CAAC,EAAE;MAC/D,IAAI,CAACjF,iCAAiC,CAACwG,MAAM,CAAC,EAAE;QAC5CW,WAAW,CAACE,IAAI,CAAC;UACbb,MAAM,EAAEA,MAAM,CAACc,IAAI;UACnBC,MAAM,EAAE,eAAe;UACvBC,KAAK,EAAEpD,QAAQ,CAACkB,QAAQ;UACxBjB,SAAS,EAAED,QAAQ,CAACC;QACxB,CAAC,CAAC;MACN;MACA,IAAIrE,iCAAiC,CAACwG,MAAM,CAAC,IAAI3F,eAAe,CAAC2F,MAAM,CAACiB,WAAW,CAAC,EAAE;QAClF,IAAIC,IAAI,GAAGzF,KAAK,CAACyF,IAAI,CAAC;UAClBC,EAAE,EAAE,eAAe;UACnBH,KAAK,EAAE,IAAI,CAAC5B,SAAS,CAACxB,QAAQ,CAACkB,QAAQ,CAAC,CAACsC,OAAO;UAChDvD,SAAS,EAAED,QAAQ,CAACC,SAAS;UAC7BwD,UAAU,EAAE,KAAK;UACjBC,iBAAiB,EAAE;QACvB,CAAC,CAAC;QACF,IAAIC,UAAU,GAAG,KAAK,CAAC;QACvB,IAAIL,IAAI,CAAClB,MAAM,EAAE;UACbuB,UAAU,GAAG7G,oBAAoB,CAACwG,IAAI,CAAClB,MAAM,EAAEA,MAAM,CAAC;QAC1D;QACA,IAAI,OAAOuB,UAAU,KAAK,WAAW,EAAE;UACnCvB,MAAM,CAACc,IAAI,GAAGS,UAAU;UACxBZ,WAAW,CAACE,IAAI,CAAC;YACbb,MAAM,EAAEuB,UAAU;YAClBR,MAAM,EAAE,eAAe;YACvBC,KAAK,EAAEpD,QAAQ,CAACkB,QAAQ;YACxBjB,SAAS,EAAED,QAAQ,CAACC;UACxB,CAAC,CAAC;QACN;MACJ;MACA,IAAI2D,eAAe,GAAG5D,QAAQ,CAACG,aAAa;MAC5C,IAAIyD,eAAe,EAAE;QACjB,IAAI,CAACnF,OAAO,CAACa,OAAO,CAAC,UAAU1B,EAAE,EAAE4B,OAAO,EAAE;UACxC,IAAIqE,eAAe,GAAGjG,EAAE,CAACiG,eAAe;UACxC,IAAIC,SAAS,GAAGD,eAAe,IAAIA,eAAe,CAACC,SAAS;UAC5D,IAAI,CAACA,SAAS,IAAI,CAACtG,cAAc,CAACuG,IAAI,CAACH,eAAe,EAAEE,SAAS,CAAC,EAAE;YAChE;UACJ;UACA,IAAIE,OAAO,GAAGJ,eAAe,CAACE,SAAS,CAAC;UACxC,IAAI9F,EAAE,GAAGqB,KAAK,CAACZ,OAAO,CAACwF,GAAG,CAACzE,OAAO,CAAC;YAAE0B,QAAQ,GAAGlD,EAAE,CAACkD,QAAQ;YAAEjB,SAAS,GAAGjC,EAAE,CAACiC,SAAS;UACrF,IAAI9B,EAAE,GAAGN,KAAK,CAACyF,IAAI,CAAC;cAChBF,KAAK,EAAElC,QAAQ;cACfjB,SAAS,EAAEA,SAAS;cACpByD,iBAAiB,EAAE,IAAI;cACvBD,UAAU,EAAE;YAChB,CAAC,CAAC;YAAES,kBAAkB,GAAG/F,EAAE,CAACiE,MAAM;YAAE+B,QAAQ,GAAGhG,EAAE,CAACgG,QAAQ;UAC1D,IAAIA,QAAQ,IAAID,kBAAkB,EAAE;YAChC,IAAIE,eAAe,GAAGJ,OAAO,CAACE,kBAAkB,EAAE;cAC9CG,cAAc,EAAEjC,MAAM;cACtB0B,SAAS,EAAE5C,QAAQ,IAAIjF,gBAAgB,CAACiF,QAAQ,CAAC,IAAI,KAAK,CAAC;cAC3DoD,cAAc,EAAErE;YACpB,CAAC,CAAC;YACF,IAAImE,eAAe,EAAE;cACjBrB,WAAW,CAACE,IAAI,CAAC;gBACbb,MAAM,EAAEgC,eAAe;gBACvBjB,MAAM,EAAE,YAAY;gBACpBC,KAAK,EAAElC,QAAQ;gBACfjB,SAAS,EAAEA;cACf,CAAC,CAAC;YACN;UACJ;QACJ,CAAC,CAAC;MACN;IACJ;IACA,IAAI8C,WAAW,CAACwB,MAAM,GAAG,CAAC,IACtBvE,QAAQ,CAACI,cAAc,IACvBJ,QAAQ,CAACQ,MAAM,IACfR,QAAQ,CAACS,cAAc,IACvBT,QAAQ,CAACyC,gBAAgB,EAAE;MAC3B,IAAI+B,SAAS,GAAG,EAAE;MAClB,IAAI,CAACpE,cAAc,CAAC;QAChBqE,WAAW,EAAE,UAAU5G,KAAK,EAAE;UAC1B,IAAI,CAACmF,SAAS,EAAE;YACZD,WAAW,CAACzD,OAAO,CAAC,UAAUoF,KAAK,EAAE;cAAE,OAAO7G,KAAK,CAAC6G,KAAK,CAACA,KAAK,CAAC;YAAE,CAAC,CAAC;UACxE;UACA,IAAIlE,MAAM,GAAGR,QAAQ,CAACQ,MAAM;UAC5B,IAAImE,aAAa,GAAG,CAAC9I,sBAAsB,CAACuG,MAAM,CAAC,IAC9CxG,iCAAiC,CAACwG,MAAM,CAAC,IAAI,CAACA,MAAM,CAACQ,OAAQ;UAClE,IAAIpC,MAAM,EAAE;YACR,IAAI,CAACwC,SAAS,EAAE;cACZ,IAAIM,IAAI,GAAGzF,KAAK,CAACyF,IAAI,CAAC;gBAClBC,EAAE,EAAE,eAAe;gBACnBH,KAAK,EAAE/D,KAAK,CAACmC,SAAS,CAACxB,QAAQ,CAACkB,QAAQ,CAAC,CAACsC,OAAO;gBACjDvD,SAAS,EAAED,QAAQ,CAACC,SAAS;gBAC7BwD,UAAU,EAAE,KAAK;gBACjBC,iBAAiB,EAAE;cACvB,CAAC,CAAC;cACF,IAAIJ,IAAI,CAACa,QAAQ,EAAE;gBACf/B,MAAM,GAAG/G,QAAQ,CAACA,QAAQ,CAAC,CAAC,CAAC,EAAE+G,MAAM,CAAC,EAAE;kBAAEc,IAAI,EAAEI,IAAI,CAAClB;gBAAO,CAAC,CAAC;gBAC9D,IAAI,aAAa,IAAIA,MAAM,EAAE;kBACzB,OAAOA,MAAM,CAACiB,WAAW;gBAC7B;gBACA,IAAI,SAAS,IAAIjB,MAAM,EAAE;kBACrB,OAAOA,MAAM,CAACQ,OAAO;gBACzB;cACJ;YACJ;YACA,IAAI+B,aAAa,EAAE;cACfnE,MAAM,CAAC3C,KAAK,EAAEuE,MAAM,EAAE;gBAClBrB,OAAO,EAAEf,QAAQ,CAACe,OAAO;gBACzBd,SAAS,EAAED,QAAQ,CAACC;cACxB,CAAC,CAAC;YACN;UACJ;UACA,IAAI,CAAC+C,SAAS,IAAI,CAAChD,QAAQ,CAACc,cAAc,IAAI6D,aAAa,EAAE;YACzD9G,KAAK,CAAC+G,MAAM,CAAC;cACTrB,EAAE,EAAE,eAAe;cACnBsB,MAAM,EAAE,UAAUC,KAAK,EAAElH,EAAE,EAAE;gBACzB,IAAImH,SAAS,GAAGnH,EAAE,CAACmH,SAAS;kBAAEC,MAAM,GAAGpH,EAAE,CAACoH,MAAM;gBAChD,OAAOD,SAAS,KAAK,YAAY,GAAGD,KAAK,GAAGE,MAAM;cACtD;YACJ,CAAC,CAAC;UACN;QACJ,CAAC;QACDC,OAAO,EAAEjF,QAAQ,CAACI,cAAc;QAChCqD,UAAU,EAAE,KAAK;QACjBhB,gBAAgB,EAAEzC,QAAQ,CAACyC,gBAAgB;QAC3ChC,cAAc,EAAET,QAAQ,CAACS,cAAc,IAAI;MAC/C,CAAC,CAAC,CAACnB,OAAO,CAAC,UAAU8C,MAAM,EAAE;QAAE,OAAOoC,SAAS,CAACvB,IAAI,CAACb,MAAM,CAAC;MAAE,CAAC,CAAC;MAChE,IAAIpC,QAAQ,CAACM,mBAAmB,IAAIN,QAAQ,CAACS,cAAc,EAAE;QACzD,OAAOuB,OAAO,CAACkD,GAAG,CAACV,SAAS,CAAC,CAACW,IAAI,CAAC,YAAY;UAAE,OAAO/C,MAAM;QAAE,CAAC,CAAC;MACtE;IACJ;IACA,OAAOJ,OAAO,CAACC,OAAO,CAACG,MAAM,CAAC;EAClC,CAAC;EACDzE,YAAY,CAACD,SAAS,CAACoE,sBAAsB,GAAG,UAAU5B,kBAAkB,EAAEF,QAAQ,EAAE;IACpF,IAAIX,KAAK,GAAG,IAAI;IAChB,IAAI6D,IAAI,GAAG,OAAOhD,kBAAkB,KAAK,UAAU,GAC7CA,kBAAkB,CAACF,QAAQ,CAACC,SAAS,CAAC,GACtCC,kBAAkB;IACxB,OAAO,IAAI,CAACrC,KAAK,CAACuH,2BAA2B,CAAC,UAAUvH,KAAK,EAAE;MAC3D,IAAI;QACAwB,KAAK,CAACmD,kBAAkB,CAACnH,QAAQ,CAACA,QAAQ,CAAC,CAAC,CAAC,EAAE2E,QAAQ,CAAC,EAAE;UAAEoC,MAAM,EAAE;YAAEc,IAAI,EAAEA;UAAK;QAAE,CAAC,CAAC,EAAErF,KAAK,CAAC;MACjG,CAAC,CACD,OAAO+B,KAAK,EAAE;QACVD,OAAO,IAAInE,SAAS,CAACoE,KAAK,CAACA,KAAK,CAAC;MACrC;IACJ,CAAC,EAAEI,QAAQ,CAACgB,UAAU,CAAC;EAC3B,CAAC;EACDrD,YAAY,CAACD,SAAS,CAAC2H,UAAU,GAAG,UAAU7F,OAAO,EAAE8F,OAAO,EAAEC,aAAa,EAAE;IAC3E,OAAO,IAAI,CAACC,oBAAoB,CAAChG,OAAO,EAAE8F,OAAO,EAAEC,aAAa,CAAC,CAACE,OAAO;EAC7E,CAAC;EACD9H,YAAY,CAACD,SAAS,CAACgI,aAAa,GAAG,YAAY;IAC/C,IAAIC,KAAK,GAAGlI,MAAM,CAACyB,MAAM,CAAC,IAAI,CAAC;IAC/B,IAAI,CAACT,OAAO,CAACa,OAAO,CAAC,UAAUsG,IAAI,EAAEpG,OAAO,EAAE;MAC1CmG,KAAK,CAACnG,OAAO,CAAC,GAAG;QACbS,SAAS,EAAE2F,IAAI,CAAC3F,SAAS;QACzBsF,aAAa,EAAEK,IAAI,CAACL,aAAa;QACjCzC,YAAY,EAAE8C,IAAI,CAAC9C,YAAY;QAC/BT,aAAa,EAAEuD,IAAI,CAACvD;MACxB,CAAC;IACL,CAAC,CAAC;IACF,OAAOsD,KAAK;EAChB,CAAC;EACDhI,YAAY,CAACD,SAAS,CAACmI,WAAW,GAAG,UAAUrG,OAAO,EAAE;IACpD,IAAIsG,SAAS,GAAG,IAAI,CAACrH,OAAO,CAACwF,GAAG,CAACzE,OAAO,CAAC;IACzC,IAAIsG,SAAS,EAAE;MACXA,SAAS,CAAChD,YAAY,GAAGiD,SAAS;MAClCD,SAAS,CAACzD,aAAa,GAAG,EAAE;IAChC;EACJ,CAAC;EACD1E,YAAY,CAACD,SAAS,CAAC8D,SAAS,GAAG,UAAUN,QAAQ,EAAE;IACnD,IAAItC,cAAc,GAAG,IAAI,CAACA,cAAc;IACxC,IAAI,CAACA,cAAc,CAACoH,GAAG,CAAC9E,QAAQ,CAAC,EAAE;MAC/B,IAAI+E,WAAW,GAAG,IAAI,CAACpI,KAAK,CAACqI,iBAAiB,CAAChF,QAAQ,CAAC;MACxD,IAAIiF,YAAY,GAAG9J,qCAAqC,CAAC4J,WAAW,CAAC;MACrE,IAAIG,WAAW,GAAG,IAAI,CAAC7H,UAAU,CAAC6H,WAAW,CAACH,WAAW,CAAC;MAC1D,IAAII,WAAW,GAAGF,YAAY,IAAI,IAAI,CAAC5H,UAAU,CAAC8H,WAAW,CAACF,YAAY,CAAC;MAC3E,IAAIG,YAAY,GAAG;QACfpF,QAAQ,EAAE+E,WAAW;QACrB/J,gBAAgB,EAAEA,gBAAgB,CAAC+J,WAAW,CAAC;QAC/CM,kBAAkB,EAAE,IAAI,CAAChI,UAAU,CAACiI,oBAAoB,CAACP,WAAW,CAAC;QACrEG,WAAW,EAAEA,WAAW;QACxBC,WAAW,EAAEA,WAAW;QACxBI,WAAW,EAAE1K,gBAAgB,CAACC,sBAAsB,CAACiK,WAAW,CAAC,CAAC;QAClEzC,OAAO,EAAEnI,QAAQ,CAACA,QAAQ,CAAC,CAAC,CAAC,EAAE4K,WAAW,CAAC,EAAE;UAAES,WAAW,EAAET,WAAW,CAACS,WAAW,CAACC,GAAG,CAAC,UAAUC,GAAG,EAAE;YAC/F,IAAIA,GAAG,CAACC,IAAI,KAAK,qBAAqB,IAClCD,GAAG,CAACE,SAAS,KAAK,OAAO,EAAE;cAC3B,OAAOzL,QAAQ,CAACA,QAAQ,CAAC,CAAC,CAAC,EAAEuL,GAAG,CAAC,EAAE;gBAAEE,SAAS,EAAE;cAAQ,CAAC,CAAC;YAC9D;YACA,OAAOF,GAAG;UACd,CAAC;QAAE,CAAC;MACZ,CAAC;MACD,IAAIG,GAAG,GAAG,UAAUC,GAAG,EAAE;QACrB,IAAIA,GAAG,IAAI,CAACpI,cAAc,CAACoH,GAAG,CAACgB,GAAG,CAAC,EAAE;UACjCpI,cAAc,CAACqI,GAAG,CAACD,GAAG,EAAEV,YAAY,CAAC;QACzC;MACJ,CAAC;MACDS,GAAG,CAAC7F,QAAQ,CAAC;MACb6F,GAAG,CAACd,WAAW,CAAC;MAChBc,GAAG,CAACX,WAAW,CAAC;MAChBW,GAAG,CAACV,WAAW,CAAC;IACpB;IACA,OAAOzH,cAAc,CAACqF,GAAG,CAAC/C,QAAQ,CAAC;EACvC,CAAC;EACDvD,YAAY,CAACD,SAAS,CAACgE,YAAY,GAAG,UAAUR,QAAQ,EAAEjB,SAAS,EAAE;IACjE,OAAO5E,QAAQ,CAACA,QAAQ,CAAC,CAAC,CAAC,EAAE,IAAI,CAACmG,SAAS,CAACN,QAAQ,CAAC,CAACuF,WAAW,CAAC,EAAExG,SAAS,CAAC;EAClF,CAAC;EACDtC,YAAY,CAACD,SAAS,CAACwJ,UAAU,GAAG,UAAU5B,OAAO,EAAE;IACnDA,OAAO,GAAGjK,QAAQ,CAACA,QAAQ,CAAC,CAAC,CAAC,EAAEiK,OAAO,CAAC,EAAE;MAAErF,SAAS,EAAE,IAAI,CAACyB,YAAY,CAAC4D,OAAO,CAAClC,KAAK,EAAEkC,OAAO,CAACrF,SAAS;IAAE,CAAC,CAAC;IAC7G,IAAI,OAAOqF,OAAO,CAAC6B,2BAA2B,KAAK,WAAW,EAAE;MAC5D7B,OAAO,CAAC6B,2BAA2B,GAAG,KAAK;IAC/C;IACA,IAAIrB,SAAS,GAAG,IAAIxI,SAAS,CAAC,IAAI,CAAC;IACnC,IAAI8J,UAAU,GAAG,IAAInK,eAAe,CAAC;MACjCoK,YAAY,EAAE,IAAI;MAClBvB,SAAS,EAAEA,SAAS;MACpBR,OAAO,EAAEA;IACb,CAAC,CAAC;IACF,IAAI,CAAC7G,OAAO,CAACwI,GAAG,CAACG,UAAU,CAAC5H,OAAO,EAAEsG,SAAS,CAAC;IAC/CA,SAAS,CAACwB,IAAI,CAAC;MACXpG,QAAQ,EAAEkG,UAAU,CAAChE,KAAK;MAC1BS,eAAe,EAAEuD,UAAU;MAC3BnH,SAAS,EAAEmH,UAAU,CAACnH;IAC1B,CAAC,CAAC;IACF,OAAOmH,UAAU;EACrB,CAAC;EACDzJ,YAAY,CAACD,SAAS,CAAC0F,KAAK,GAAG,UAAUkC,OAAO,EAAE9F,OAAO,EAAE;IACvD,IAAIH,KAAK,GAAG,IAAI;IAChB,IAAIG,OAAO,KAAK,KAAK,CAAC,EAAE;MAAEA,OAAO,GAAG,IAAI,CAAC+H,eAAe,EAAE;IAAE;IAC5D5H,OAAO,GAAGnE,SAAS,CAAC8J,OAAO,CAAClC,KAAK,EAAE,mEAAmE,GAClG,sBAAsB,CAAC,GAAG5H,SAAS,CAAC8J,OAAO,CAAClC,KAAK,EAAE,EAAE,CAAC;IAC1DzD,OAAO,GAAGnE,SAAS,CAAC8J,OAAO,CAAClC,KAAK,CAACyD,IAAI,KAAK,UAAU,EAAE,gDAAgD,CAAC,GAAGrL,SAAS,CAAC8J,OAAO,CAAClC,KAAK,CAACyD,IAAI,KAAK,UAAU,EAAE,EAAE,CAAC;IAC3JlH,OAAO,GAAGnE,SAAS,CAAC,CAAC8J,OAAO,CAAC5B,iBAAiB,EAAE,wDAAwD,CAAC,GAAGlI,SAAS,CAAC,CAAC8J,OAAO,CAAC5B,iBAAiB,EAAE,EAAE,CAAC;IACrJ/D,OAAO,GAAGnE,SAAS,CAAC,CAAC8J,OAAO,CAACkC,YAAY,EAAE,mDAAmD,CAAC,GAAGhM,SAAS,CAAC,CAAC8J,OAAO,CAACkC,YAAY,EAAE,EAAE,CAAC;IACtI,OAAO,IAAI,CAACnC,UAAU,CAAC7F,OAAO,EAAE8F,OAAO,CAAC,CAACmC,OAAO,CAAC,YAAY;MAAE,OAAOpI,KAAK,CAACqI,SAAS,CAAClI,OAAO,CAAC;IAAE,CAAC,CAAC;EACtG,CAAC;EACD7B,YAAY,CAACD,SAAS,CAAC6J,eAAe,GAAG,YAAY;IACjD,OAAOI,MAAM,CAAC,IAAI,CAAC7I,cAAc,EAAE,CAAC;EACxC,CAAC;EACDnB,YAAY,CAACD,SAAS,CAACkK,iBAAiB,GAAG,YAAY;IACnD,OAAO,IAAI,CAAC7I,gBAAgB,EAAE;EAClC,CAAC;EACDpB,YAAY,CAACD,SAAS,CAAC6D,kBAAkB,GAAG,YAAY;IACpD,OAAOoG,MAAM,CAAC,IAAI,CAAC3I,iBAAiB,EAAE,CAAC;EAC3C,CAAC;EACDrB,YAAY,CAACD,SAAS,CAACmK,gBAAgB,GAAG,UAAUrI,OAAO,EAAE;IACzD,IAAI,CAACsI,2BAA2B,CAACtI,OAAO,CAAC;IACzC,IAAI,CAACuC,gBAAgB,EAAE;EAC3B,CAAC;EACDpE,YAAY,CAACD,SAAS,CAACoK,2BAA2B,GAAG,UAAUtI,OAAO,EAAE;IACpE,IAAIsG,SAAS,GAAG,IAAI,CAACrH,OAAO,CAACwF,GAAG,CAACzE,OAAO,CAAC;IACzC,IAAIsG,SAAS,EACTA,SAAS,CAAC1G,IAAI,EAAE;EACxB,CAAC;EACDzB,YAAY,CAACD,SAAS,CAACqK,UAAU,GAAG,UAAUzC,OAAO,EAAE;IACnD,IAAIA,OAAO,KAAK,KAAK,CAAC,EAAE;MAAEA,OAAO,GAAG;QAChC0C,cAAc,EAAE;MACpB,CAAC;IAAE;IACH,IAAI,CAACtI,oBAAoB,CAACC,OAAO,GAAG,IAAIlE,cAAc,CAAC,qEAAqE,CAAC,GAAG,IAAIA,cAAc,CAAC,EAAE,CAAC,CAAC;IACvJ,IAAI,CAACgD,OAAO,CAACa,OAAO,CAAC,UAAUwG,SAAS,EAAE;MACtC,IAAIA,SAAS,CAACjC,eAAe,EAAE;QAC3BiC,SAAS,CAACP,aAAa,GAAGpI,aAAa,CAAC0E,OAAO;MACnD,CAAC,MACI;QACDiE,SAAS,CAAC1G,IAAI,EAAE;MACpB;IACJ,CAAC,CAAC;IACF,IAAI,IAAI,CAACD,aAAa,EAAE;MACpB,IAAI,CAACA,aAAa,GAAG1B,MAAM,CAACyB,MAAM,CAAC,IAAI,CAAC;IAC5C;IACA,OAAO,IAAI,CAACrB,KAAK,CAACoK,KAAK,CAAC3C,OAAO,CAAC;EACpC,CAAC;EACD3H,YAAY,CAACD,SAAS,CAACwK,oBAAoB,GAAG,UAAUjD,OAAO,EAAE;IAC7D,IAAI5F,KAAK,GAAG,IAAI;IAChB,IAAI4F,OAAO,KAAK,KAAK,CAAC,EAAE;MAAEA,OAAO,GAAG,QAAQ;IAAE;IAC9C,IAAIxG,OAAO,GAAG,IAAIC,GAAG,EAAE;IACvB,IAAIyJ,iBAAiB,GAAG,IAAIzJ,GAAG,EAAE;IACjC,IAAI0J,kBAAkB,GAAG,IAAIC,GAAG,EAAE;IAClC,IAAIC,KAAK,CAACC,OAAO,CAACtD,OAAO,CAAC,EAAE;MACxBA,OAAO,CAAC3F,OAAO,CAAC,UAAUkJ,IAAI,EAAE;QAC5B,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;UAC1BL,iBAAiB,CAAClB,GAAG,CAACuB,IAAI,EAAE,KAAK,CAAC;QACtC,CAAC,MACI,IAAI5L,cAAc,CAAC4L,IAAI,CAAC,EAAE;UAC3BL,iBAAiB,CAAClB,GAAG,CAAC5H,KAAK,CAACmC,SAAS,CAACgH,IAAI,CAAC,CAACtH,QAAQ,EAAE,KAAK,CAAC;QAChE,CAAC,MACI,IAAIrE,eAAe,CAAC2L,IAAI,CAAC,IAAIA,IAAI,CAACpF,KAAK,EAAE;UAC1CgF,kBAAkB,CAACrB,GAAG,CAACyB,IAAI,CAAC;QAChC;MACJ,CAAC,CAAC;IACN;IACA,IAAI,CAAC/J,OAAO,CAACa,OAAO,CAAC,UAAU1B,EAAE,EAAE4B,OAAO,EAAE;MACxC,IAAIiJ,EAAE,GAAG7K,EAAE,CAACiG,eAAe;QAAE3C,QAAQ,GAAGtD,EAAE,CAACsD,QAAQ;MACnD,IAAIuH,EAAE,EAAE;QACJ,IAAIxD,OAAO,KAAK,KAAK,EAAE;UACnBxG,OAAO,CAACwI,GAAG,CAACzH,OAAO,EAAEiJ,EAAE,CAAC;UACxB;QACJ;QACA,IAAI3E,SAAS,GAAG2E,EAAE,CAAC3E,SAAS;UAAEnD,WAAW,GAAG8H,EAAE,CAACnD,OAAO,CAAC3E,WAAW;QAClE,IAAIA,WAAW,KAAK,SAAS,IACxBsE,OAAO,KAAK,QAAQ,IAAI,CAACwD,EAAE,CAACC,YAAY,EAAG,EAAE;UAC9C;QACJ;QACA,IAAIzD,OAAO,KAAK,QAAQ,IACnBnB,SAAS,IAAIqE,iBAAiB,CAACnC,GAAG,CAAClC,SAAS,CAAE,IAC9C5C,QAAQ,IAAIiH,iBAAiB,CAACnC,GAAG,CAAC9E,QAAQ,CAAE,EAAE;UAC/CzC,OAAO,CAACwI,GAAG,CAACzH,OAAO,EAAEiJ,EAAE,CAAC;UACxB,IAAI3E,SAAS,EACTqE,iBAAiB,CAAClB,GAAG,CAACnD,SAAS,EAAE,IAAI,CAAC;UAC1C,IAAI5C,QAAQ,EACRiH,iBAAiB,CAAClB,GAAG,CAAC/F,QAAQ,EAAE,IAAI,CAAC;QAC7C;MACJ;IACJ,CAAC,CAAC;IACF,IAAIkH,kBAAkB,CAACO,IAAI,EAAE;MACzBP,kBAAkB,CAAC9I,OAAO,CAAC,UAAUgG,OAAO,EAAE;QAC1C,IAAI9F,OAAO,GAAG7C,YAAY,CAAC,oBAAoB,CAAC;QAChD,IAAImJ,SAAS,GAAGzG,KAAK,CAACuJ,QAAQ,CAACpJ,OAAO,CAAC,CAAC8H,IAAI,CAAC;UACzCpG,QAAQ,EAAEoE,OAAO,CAAClC,KAAK;UACvBnD,SAAS,EAAEqF,OAAO,CAACrF;QACvB,CAAC,CAAC;QACF,IAAIwI,EAAE,GAAG,IAAIxL,eAAe,CAAC;UACzBoK,YAAY,EAAEhI,KAAK;UACnByG,SAAS,EAAEA,SAAS;UACpBR,OAAO,EAAEjK,QAAQ,CAACA,QAAQ,CAAC,CAAC,CAAC,EAAEiK,OAAO,CAAC,EAAE;YAAE3E,WAAW,EAAE;UAAe,CAAC;QAC5E,CAAC,CAAC;QACFnF,SAAS,CAACiN,EAAE,CAACjJ,OAAO,KAAKA,OAAO,CAAC;QACjCsG,SAAS,CAAC+C,kBAAkB,CAACJ,EAAE,CAAC;QAChChK,OAAO,CAACwI,GAAG,CAACzH,OAAO,EAAEiJ,EAAE,CAAC;MAC5B,CAAC,CAAC;IACN;IACA,IAAI9I,OAAO,IAAIwI,iBAAiB,CAACQ,IAAI,EAAE;MACnCR,iBAAiB,CAAC7I,OAAO,CAAC,UAAUwJ,QAAQ,EAAEC,SAAS,EAAE;QACrD,IAAI,CAACD,QAAQ,EAAE;UACXnJ,OAAO,IAAInE,SAAS,CAACwN,IAAI,CAAC,gBAAgB,CAACC,MAAM,CAAC,OAAOF,SAAS,KAAK,QAAQ,GAAG,QAAQ,GAAG,EAAE,CAAC,CAACE,MAAM,CAACC,IAAI,CAACC,SAAS,CAACJ,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,oDAAoD,CAAC,CAAC;QACtM;MACJ,CAAC,CAAC;IACN;IACA,OAAOtK,OAAO;EAClB,CAAC;EACDd,YAAY,CAACD,SAAS,CAAC0L,wBAAwB,GAAG,UAAUC,cAAc,EAAE;IACxE,IAAIhK,KAAK,GAAG,IAAI;IAChB,IAAIgK,cAAc,KAAK,KAAK,CAAC,EAAE;MAAEA,cAAc,GAAG,KAAK;IAAE;IACzD,IAAIC,uBAAuB,GAAG,EAAE;IAChC,IAAI,CAACpB,oBAAoB,CAACmB,cAAc,GAAG,KAAK,GAAG,QAAQ,CAAC,CAAC/J,OAAO,CAAC,UAAUuE,eAAe,EAAErE,OAAO,EAAE;MACrG,IAAImB,WAAW,GAAGkD,eAAe,CAACyB,OAAO,CAAC3E,WAAW;MACrDkD,eAAe,CAAC0F,gBAAgB,EAAE;MAClC,IAAIF,cAAc,IACb1I,WAAW,KAAK,SAAS,IACtBA,WAAW,KAAK,YAAa,EAAE;QACnC2I,uBAAuB,CAACrG,IAAI,CAACY,eAAe,CAAC2F,OAAO,EAAE,CAAC;MAC3D;MACAnK,KAAK,CAACuJ,QAAQ,CAACpJ,OAAO,CAAC,CAACiK,OAAO,CAAC,IAAI,CAAC;IACzC,CAAC,CAAC;IACF,IAAI,CAAC1H,gBAAgB,EAAE;IACvB,OAAOC,OAAO,CAACkD,GAAG,CAACoE,uBAAuB,CAAC;EAC/C,CAAC;EACD3L,YAAY,CAACD,SAAS,CAACmL,kBAAkB,GAAG,UAAUhF,eAAe,EAAE;IACnE,IAAI,CAAC+E,QAAQ,CAAC/E,eAAe,CAACrE,OAAO,CAAC,CAACqJ,kBAAkB,CAAChF,eAAe,CAAC;EAC9E,CAAC;EACDlG,YAAY,CAACD,SAAS,CAACgM,wBAAwB,GAAG,UAAU9L,EAAE,EAAE;IAC5D,IAAIyB,KAAK,GAAG,IAAI;IAChB,IAAI+D,KAAK,GAAGxF,EAAE,CAACwF,KAAK;MAAEzC,WAAW,GAAG/C,EAAE,CAAC+C,WAAW;MAAEE,WAAW,GAAGjD,EAAE,CAACiD,WAAW;MAAEZ,SAAS,GAAGrC,EAAE,CAACqC,SAAS;MAAEjC,EAAE,GAAGJ,EAAE,CAACmD,OAAO;MAAEA,OAAO,GAAG/C,EAAE,KAAK,KAAK,CAAC,GAAG,CAAC,CAAC,GAAGA,EAAE;IAC9JoF,KAAK,GAAG,IAAI,CAAC5B,SAAS,CAAC4B,KAAK,CAAC,CAAClC,QAAQ;IACtCjB,SAAS,GAAG,IAAI,CAACyB,YAAY,CAAC0B,KAAK,EAAEnD,SAAS,CAAC;IAC/C,IAAI0J,cAAc,GAAG,UAAU1J,SAAS,EAAE;MACtC,OAAOZ,KAAK,CAAC8C,qBAAqB,CAACiB,KAAK,EAAErC,OAAO,EAAEd,SAAS,CAAC,CAAC0G,GAAG,CAAC,UAAUvE,MAAM,EAAE;QAChF,IAAIzB,WAAW,KAAK,UAAU,EAAE;UAC5B,IAAIpD,iBAAiB,CAAC6E,MAAM,EAAEvB,WAAW,CAAC,EAAE;YACxCxB,KAAK,CAACxB,KAAK,CAAC6G,KAAK,CAAC;cACdtB,KAAK,EAAEA,KAAK;cACZhB,MAAM,EAAEA,MAAM,CAACc,IAAI;cACnBC,MAAM,EAAE,mBAAmB;cAC3BlD,SAAS,EAAEA;YACf,CAAC,CAAC;UACN;UACAZ,KAAK,CAAC0C,gBAAgB,EAAE;QAC5B;QACA,IAAI5F,qBAAqB,CAACiG,MAAM,CAAC,EAAE;UAC/B,MAAM,IAAIrF,WAAW,CAAC;YAClBsF,aAAa,EAAED,MAAM,CAACG;UAC1B,CAAC,CAAC;QACN;QACA,OAAOH,MAAM;MACjB,CAAC,CAAC;IACN,CAAC;IACD,IAAI,IAAI,CAACZ,SAAS,CAAC4B,KAAK,CAAC,CAAClH,gBAAgB,EAAE;MACxC,IAAI0N,mBAAmB,GAAG,IAAI,CAACrL,UAAU,CAACoD,oBAAoB,CAACyB,KAAK,EAAEnD,SAAS,EAAEc,OAAO,CAAC,CAACoE,IAAI,CAACwE,cAAc,CAAC;MAC9G,OAAO,IAAIpN,UAAU,CAAC,UAAUsN,QAAQ,EAAE;QACtC,IAAIC,GAAG,GAAG,IAAI;QACdF,mBAAmB,CAACzE,IAAI,CAAC,UAAUiC,UAAU,EAAE;UAAE,OAAO0C,GAAG,GAAG1C,UAAU,CAAC1E,SAAS,CAACmH,QAAQ,CAAC;QAAE,CAAC,EAAEA,QAAQ,CAACjK,KAAK,CAAC;QAChH,OAAO,YAAY;UAAE,OAAOkK,GAAG,IAAIA,GAAG,CAACC,WAAW,EAAE;QAAE,CAAC;MAC3D,CAAC,CAAC;IACN;IACA,OAAOJ,cAAc,CAAC1J,SAAS,CAAC;EACpC,CAAC;EACDtC,YAAY,CAACD,SAAS,CAACgK,SAAS,GAAG,UAAUlI,OAAO,EAAE;IAClD,IAAI,CAACC,oBAAoB,CAACD,OAAO,CAAC;IAClC,IAAI,CAACuC,gBAAgB,EAAE;EAC3B,CAAC;EACDpE,YAAY,CAACD,SAAS,CAAC+B,oBAAoB,GAAG,UAAUD,OAAO,EAAE;IAC7D,IAAI,CAACsI,2BAA2B,CAACtI,OAAO,CAAC;IACzC,IAAI,CAACwK,WAAW,CAACxK,OAAO,CAAC;EAC7B,CAAC;EACD7B,YAAY,CAACD,SAAS,CAACsM,WAAW,GAAG,UAAUxK,OAAO,EAAE;IACpD,IAAI,CAACb,cAAc,CAACsL,MAAM,CAACzK,OAAO,CAAC;IACnC,IAAI,IAAI,CAACf,OAAO,CAACuH,GAAG,CAACxG,OAAO,CAAC,EAAE;MAC3B,IAAI,CAACoJ,QAAQ,CAACpJ,OAAO,CAAC,CAACJ,IAAI,EAAE;MAC7B,IAAI,CAACX,OAAO,CAACwL,MAAM,CAACzK,OAAO,CAAC;IAChC;EACJ,CAAC;EACD7B,YAAY,CAACD,SAAS,CAACqE,gBAAgB,GAAG,YAAY;IAClD,IAAI,IAAI,CAAC7D,WAAW,EAChB,IAAI,CAACA,WAAW,EAAE;IACtB,IAAI,CAACO,OAAO,CAACa,OAAO,CAAC,UAAUsG,IAAI,EAAE;MAAE,OAAOA,IAAI,CAACsE,MAAM,EAAE;IAAE,CAAC,CAAC;EACnE,CAAC;EACDvM,YAAY,CAACD,SAAS,CAACyM,aAAa,GAAG,YAAY;IAC/C,OAAO,IAAI,CAAC5L,UAAU;EAC1B,CAAC;EACDZ,YAAY,CAACD,SAAS,CAACyE,qBAAqB,GAAG,UAAUiB,KAAK,EAAErC,OAAO,EAAEd,SAAS,EAAEmK,aAAa,EAAE;IAC/F,IAAI/K,KAAK,GAAG,IAAI;IAChB,IAAIzB,EAAE;IACN,IAAIwM,aAAa,KAAK,KAAK,CAAC,EAAE;MAAEA,aAAa,GAAG,CAACxM,EAAE,GAAGmD,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAAC9C,kBAAkB,MAAM,IAAI,IAAIL,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,IAAI,CAACK,kBAAkB;IAAE;IAC9L,IAAImJ,UAAU;IACd,IAAIf,WAAW,GAAG,IAAI,CAAC7E,SAAS,CAAC4B,KAAK,CAAC,CAACiD,WAAW;IACnD,IAAIA,WAAW,EAAE;MACb,IAAIrI,EAAE,GAAG,IAAI;QAAEqM,yBAAyB,GAAGrM,EAAE,CAACiB,uBAAuB;QAAEnB,IAAI,GAAGE,EAAE,CAACF,IAAI;MACrF,IAAIgJ,SAAS,GAAG;QACZ1D,KAAK,EAAEiD,WAAW;QAClBpG,SAAS,EAAEA,SAAS;QACpBqK,aAAa,EAAErO,gBAAgB,CAACoK,WAAW,CAAC,IAAI,KAAK,CAAC;QACtDtF,OAAO,EAAE,IAAI,CAACwJ,cAAc,CAAClP,QAAQ,CAACA,QAAQ,CAAC,CAAC,CAAC,EAAE0F,OAAO,CAAC,EAAE;UAAEyJ,UAAU,EAAE,CAACJ;QAAc,CAAC,CAAC;MAChG,CAAC;MACDrJ,OAAO,GAAG+F,SAAS,CAAC/F,OAAO;MAC3B,IAAIqJ,aAAa,EAAE;QACf,IAAIK,aAAa,GAAGJ,yBAAyB,CAACpG,GAAG,CAACoC,WAAW,CAAC,IAAI,IAAI3H,GAAG,EAAE;QAC3E2L,yBAAyB,CAACpD,GAAG,CAACZ,WAAW,EAAEoE,aAAa,CAAC;QACzD,IAAIC,SAAS,GAAG5O,kBAAkB,CAACmE,SAAS,CAAC;QAC7CmH,UAAU,GAAGqD,aAAa,CAACxG,GAAG,CAACyG,SAAS,CAAC;QACzC,IAAI,CAACtD,UAAU,EAAE;UACb,IAAIuD,OAAO,GAAG,IAAIjO,OAAO,CAAC,CACtBf,OAAO,CAACmC,IAAI,EAAEgJ,SAAS,CAAC,CAC3B,CAAC;UACF2D,aAAa,CAACxD,GAAG,CAACyD,SAAS,EAAEtD,UAAU,GAAGuD,OAAO,CAAC;UAClDA,OAAO,CAACC,UAAU,CAAC,YAAY;YAC3B,IAAIH,aAAa,CAACR,MAAM,CAACS,SAAS,CAAC,IAC/BD,aAAa,CAAC9B,IAAI,GAAG,CAAC,EAAE;cACxB0B,yBAAyB,CAACJ,MAAM,CAAC5D,WAAW,CAAC;YACjD;UACJ,CAAC,CAAC;QACN;MACJ,CAAC,MACI;QACDe,UAAU,GAAG,IAAI1K,OAAO,CAAC,CACrBf,OAAO,CAACmC,IAAI,EAAEgJ,SAAS,CAAC,CAC3B,CAAC;MACN;IACJ,CAAC,MACI;MACDM,UAAU,GAAG,IAAI1K,OAAO,CAAC,CACrBH,UAAU,CAACsO,EAAE,CAAC;QAAE3H,IAAI,EAAE,CAAC;MAAE,CAAC,CAAC,CAC9B,CAAC;MACFnC,OAAO,GAAG,IAAI,CAACwJ,cAAc,CAACxJ,OAAO,CAAC;IAC1C;IACA,IAAIqF,WAAW,GAAG,IAAI,CAAC5E,SAAS,CAAC4B,KAAK,CAAC,CAACgD,WAAW;IACnD,IAAIA,WAAW,EAAE;MACbgB,UAAU,GAAG5K,QAAQ,CAAC4K,UAAU,EAAE,UAAUhF,MAAM,EAAE;QAChD,OAAO/C,KAAK,CAACd,UAAU,CAACuM,YAAY,CAAC;UACjC5J,QAAQ,EAAEkF,WAAW;UACrB2E,YAAY,EAAE3I,MAAM;UACpBrB,OAAO,EAAEA,OAAO;UAChBd,SAAS,EAAEA;QACf,CAAC,CAAC;MACN,CAAC,CAAC;IACN;IACA,OAAOmH,UAAU;EACrB,CAAC;EACDzJ,YAAY,CAACD,SAAS,CAACsN,kBAAkB,GAAG,UAAUlF,SAAS,EAAEmF,kBAAkB,EAAE3F,OAAO,EAAE;IAC1F,IAAI4F,SAAS,GAAGpF,SAAS,CAACqF,aAAa,GAAG,IAAI,CAACvD,iBAAiB,EAAE;IAClE,IAAIwD,YAAY,GAAG,IAAI,CAACvN,KAAK,CAAC4D,gBAAgB,CAAC,IAAI,CAACD,SAAS,CAACsE,SAAS,CAAC5E,QAAQ,CAAC,CAACA,QAAQ,CAAC;IAC3F,OAAO1E,QAAQ,CAAC,IAAI,CAAC2F,qBAAqB,CAACiJ,YAAY,EAAE9F,OAAO,CAACvE,OAAO,EAAEuE,OAAO,CAACrF,SAAS,CAAC,EAAE,UAAUmC,MAAM,EAAE;MAC5G,IAAIC,aAAa,GAAGjG,0BAA0B,CAACgG,MAAM,CAAC;MACtD,IAAIiJ,SAAS,GAAGhJ,aAAa,CAACkC,MAAM,GAAG,CAAC;MACxC,IAAI2G,SAAS,IAAIpF,SAAS,CAACqF,aAAa,EAAE;QACtC,IAAIE,SAAS,IAAI/F,OAAO,CAACzE,WAAW,KAAK,MAAM,EAAE;UAC7C,MAAMiF,SAAS,CAACwF,SAAS,CAAC,IAAIvO,WAAW,CAAC;YACtCsF,aAAa,EAAEA;UACnB,CAAC,CAAC,CAAC;QACP;QACAyD,SAAS,CAACyF,UAAU,CAACnJ,MAAM,EAAEgJ,YAAY,EAAE9F,OAAO,EAAE2F,kBAAkB,CAAC;QACvEnF,SAAS,CAAC0F,SAAS,EAAE;MACzB;MACA,IAAIC,GAAG,GAAG;QACNvI,IAAI,EAAEd,MAAM,CAACc,IAAI;QACjBrB,OAAO,EAAE,KAAK;QACd0D,aAAa,EAAEpI,aAAa,CAACuO;MACjC,CAAC;MACD,IAAIL,SAAS,IAAI/F,OAAO,CAACzE,WAAW,KAAK,QAAQ,EAAE;QAC/C4K,GAAG,CAAClJ,MAAM,GAAGF,aAAa;QAC1BoJ,GAAG,CAAClG,aAAa,GAAGpI,aAAa,CAACyC,KAAK;MAC3C;MACA,OAAO6L,GAAG;IACd,CAAC,EAAE,UAAU3I,YAAY,EAAE;MACvB,IAAIlD,KAAK,GAAG5C,aAAa,CAAC8F,YAAY,CAAC,GACjCA,YAAY,GACZ,IAAI/F,WAAW,CAAC;QAAE+F,YAAY,EAAEA;MAAa,CAAC,CAAC;MACrD,IAAIoI,SAAS,IAAIpF,SAAS,CAACqF,aAAa,EAAE;QACtCrF,SAAS,CAACwF,SAAS,CAAC1L,KAAK,CAAC;MAC9B;MACA,MAAMA,KAAK;IACf,CAAC,CAAC;EACN,CAAC;EACDjC,YAAY,CAACD,SAAS,CAAC8H,oBAAoB,GAAG,UAAUhG,OAAO,EAAE8F,OAAO,EAAEC,aAAa,EAAE;IACrF,IAAIlG,KAAK,GAAG,IAAI;IAChB,IAAIkG,aAAa,KAAK,KAAK,CAAC,EAAE;MAAEA,aAAa,GAAGpI,aAAa,CAAC0E,OAAO;IAAE;IACvE,IAAIuB,KAAK,GAAG,IAAI,CAAC5B,SAAS,CAAC8D,OAAO,CAAClC,KAAK,CAAC,CAAClC,QAAQ;IAClD,IAAIjB,SAAS,GAAG,IAAI,CAACyB,YAAY,CAAC0B,KAAK,EAAEkC,OAAO,CAACrF,SAAS,CAAC;IAC3D,IAAI6F,SAAS,GAAG,IAAI,CAAC8C,QAAQ,CAACpJ,OAAO,CAAC;IACtC,IAAImM,QAAQ,GAAG,IAAI,CAAC5N,cAAc,CAACmJ,UAAU;IAC7C,IAAItJ,EAAE,GAAG0H,OAAO,CAAC3E,WAAW;MAAEA,WAAW,GAAG/C,EAAE,KAAK,KAAK,CAAC,GAAG+N,QAAQ,IAAIA,QAAQ,CAAChL,WAAW,IAAI,aAAa,GAAG/C,EAAE;MAAEI,EAAE,GAAGsH,OAAO,CAACzE,WAAW;MAAEA,WAAW,GAAG7C,EAAE,KAAK,KAAK,CAAC,GAAG2N,QAAQ,IAAIA,QAAQ,CAAC9K,WAAW,IAAI,MAAM,GAAG7C,EAAE;MAAEG,EAAE,GAAGmH,OAAO,CAAC5B,iBAAiB;MAAEA,iBAAiB,GAAGvF,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,GAAGA,EAAE;MAAEE,EAAE,GAAGiH,OAAO,CAAC6B,2BAA2B;MAAEA,2BAA2B,GAAG9I,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,GAAGA,EAAE;MAAEgC,EAAE,GAAGiF,OAAO,CAACvE,OAAO;MAAEA,OAAO,GAAGV,EAAE,KAAK,KAAK,CAAC,GAAG,CAAC,CAAC,GAAGA,EAAE;IACxc,IAAIuL,UAAU,GAAGnO,MAAM,CAACoO,MAAM,CAAC,CAAC,CAAC,EAAEvG,OAAO,EAAE;MACxClC,KAAK,EAAEA,KAAK;MACZnD,SAAS,EAAEA,SAAS;MACpBU,WAAW,EAAEA,WAAW;MACxBE,WAAW,EAAEA,WAAW;MACxB6C,iBAAiB,EAAEA,iBAAiB;MACpCyD,2BAA2B,EAAEA,2BAA2B;MACxDpG,OAAO,EAAEA;IACb,CAAC,CAAC;IACF,IAAI+K,aAAa,GAAG,UAAU7L,SAAS,EAAE;MACrC2L,UAAU,CAAC3L,SAAS,GAAGA,SAAS;MAChC,IAAI8L,cAAc,GAAG1M,KAAK,CAAC2M,kBAAkB,CAAClG,SAAS,EAAE8F,UAAU,EAAErG,aAAa,CAAC;MACnF,IAAIqG,UAAU,CAACjL,WAAW,KAAK,SAAS,IACpCoL,cAAc,CAACxH,MAAM,GAAG,CAAC,IACzBuB,SAAS,CAACjC,eAAe,EAAE;QAC3BiC,SAAS,CAACjC,eAAe,CAAC,sBAAsB,CAAC,CAAC,aAAa,EAAEyB,OAAO,CAAC;MAC7E;MACA,OAAOyG,cAAc;IACzB,CAAC;IACD,IAAIE,eAAe,GAAG,YAAY;MAAE,OAAO5M,KAAK,CAACV,cAAc,CAACsL,MAAM,CAACzK,OAAO,CAAC;IAAE,CAAC;IAClF,IAAI,CAACb,cAAc,CAACsI,GAAG,CAACzH,OAAO,EAAE,UAAU0M,MAAM,EAAE;MAC/CD,eAAe,EAAE;MACjBE,UAAU,CAAC,YAAY;QAAE,OAAOxB,OAAO,CAAC9K,MAAM,CAACqM,MAAM,CAAC;MAAE,CAAC,CAAC;IAC9D,CAAC,CAAC;IACF,IAAIvB,OAAO,GAAG,IAAIjO,OAAO,CAAC,IAAI,CAAC8E,SAAS,CAACoK,UAAU,CAACxI,KAAK,CAAC,CAAClH,gBAAgB,GACrE,IAAI,CAACqC,UAAU,CAACoD,oBAAoB,CAACiK,UAAU,CAACxI,KAAK,EAAEwI,UAAU,CAAC3L,SAAS,EAAE2L,UAAU,CAAC7K,OAAO,CAAC,CAACoE,IAAI,CAAC2G,aAAa,CAAC,GACpHA,aAAa,CAACF,UAAU,CAAC3L,SAAS,CAAC,CAAC;IAC1C0K,OAAO,CAAClF,OAAO,CAACN,IAAI,CAAC8G,eAAe,EAAEA,eAAe,CAAC;IACtD,OAAOtB,OAAO;EAClB,CAAC;EACDhN,YAAY,CAACD,SAAS,CAAC0C,cAAc,GAAG,UAAUxC,EAAE,EAAE;IAClD,IAAIyB,KAAK,GAAG,IAAI;IAChB,IAAIoF,WAAW,GAAG7G,EAAE,CAAC6G,WAAW;MAAEQ,OAAO,GAAGrH,EAAE,CAACqH,OAAO;MAAEjH,EAAE,GAAGJ,EAAE,CAAC6F,UAAU;MAAEA,UAAU,GAAGzF,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,GAAGA,EAAE;MAAEG,EAAE,GAAGP,EAAE,CAAC6E,gBAAgB;MAAEA,gBAAgB,GAAGtE,EAAE,KAAK,KAAK,CAAC,GAAGsF,UAAU,GAAG9G,YAAY,CAAC,gBAAgB,CAAC,GAAG,KAAK,CAAC,GAAGwB,EAAE;MAAEsC,cAAc,GAAG7C,EAAE,CAAC6C,cAAc;IAC/Q,IAAI2L,mBAAmB,GAAG,IAAI1N,GAAG,EAAE;IACnC,IAAIuG,OAAO,EAAE;MACT,IAAI,CAACiD,oBAAoB,CAACjD,OAAO,CAAC,CAAC3F,OAAO,CAAC,UAAUmJ,EAAE,EAAEjJ,OAAO,EAAE;QAC9D4M,mBAAmB,CAACnF,GAAG,CAACzH,OAAO,EAAE;UAC7BiJ,EAAE,EAAEA,EAAE;UACN4D,QAAQ,EAAEhN,KAAK,CAACuJ,QAAQ,CAACpJ,OAAO,CAAC,CAAC8M,OAAO;QAC7C,CAAC,CAAC;MACN,CAAC,CAAC;IACN;IACA,IAAIC,OAAO,GAAG,IAAI7N,GAAG;IACrB,IAAI+F,WAAW,EAAE;MACb,IAAI,CAAC5G,KAAK,CAAC2O,KAAK,CAAC;QACbhM,MAAM,EAAEiE,WAAW;QACnBhB,UAAU,EAAEA,UAAU,IAAIhB,gBAAgB,IAAI,KAAK;QACnDA,gBAAgB,EAAEA,gBAAgB;QAClCgK,cAAc,EAAE,UAAUC,KAAK,EAAEpJ,IAAI,EAAE+I,QAAQ,EAAE;UAC7C,IAAI5D,EAAE,GAAGiE,KAAK,CAACC,OAAO,YAAYrP,SAAS,IACvCoP,KAAK,CAACC,OAAO,CAAC9I,eAAe;UACjC,IAAI4E,EAAE,EAAE;YACJ,IAAIhI,cAAc,EAAE;cAChB2L,mBAAmB,CAACnC,MAAM,CAACxB,EAAE,CAACjJ,OAAO,CAAC;cACtC,IAAI4C,MAAM,GAAG3B,cAAc,CAACgI,EAAE,EAAEnF,IAAI,EAAE+I,QAAQ,CAAC;cAC/C,IAAIjK,MAAM,KAAK,IAAI,EAAE;gBACjBA,MAAM,GAAGqG,EAAE,CAACe,OAAO,EAAE;cACzB;cACA,IAAIpH,MAAM,KAAK,KAAK,EAAE;gBAClBmK,OAAO,CAACtF,GAAG,CAACwB,EAAE,EAAErG,MAAM,CAAC;cAC3B;cACA,OAAOA,MAAM;YACjB;YACA,IAAI3B,cAAc,KAAK,IAAI,EAAE;cACzB2L,mBAAmB,CAACnF,GAAG,CAACwB,EAAE,CAACjJ,OAAO,EAAE;gBAAEiJ,EAAE,EAAEA,EAAE;gBAAE4D,QAAQ,EAAEA,QAAQ;gBAAE/I,IAAI,EAAEA;cAAK,CAAC,CAAC;YACnF;UACJ;QACJ;MACJ,CAAC,CAAC;IACN;IACA,IAAI8I,mBAAmB,CAACzD,IAAI,EAAE;MAC1ByD,mBAAmB,CAAC9M,OAAO,CAAC,UAAU1B,EAAE,EAAE4B,OAAO,EAAE;QAC/C,IAAIiJ,EAAE,GAAG7K,EAAE,CAAC6K,EAAE;UAAE4D,QAAQ,GAAGzO,EAAE,CAACyO,QAAQ;UAAE/I,IAAI,GAAG1F,EAAE,CAAC0F,IAAI;QACtD,IAAIlB,MAAM;QACV,IAAI3B,cAAc,EAAE;UAChB,IAAI,CAAC6C,IAAI,EAAE;YACP,IAAIsC,IAAI,GAAG6C,EAAE,CAAC,WAAW,CAAC;YAC1B7C,IAAI,CAACqC,KAAK,EAAE;YACZ3E,IAAI,GAAGsC,IAAI,CAAC0G,OAAO,EAAE;UACzB;UACAlK,MAAM,GAAG3B,cAAc,CAACgI,EAAE,EAAEnF,IAAI,EAAE+I,QAAQ,CAAC;QAC/C;QACA,IAAI,CAAC5L,cAAc,IAAI2B,MAAM,KAAK,IAAI,EAAE;UACpCA,MAAM,GAAGqG,EAAE,CAACe,OAAO,EAAE;QACzB;QACA,IAAIpH,MAAM,KAAK,KAAK,EAAE;UAClBmK,OAAO,CAACtF,GAAG,CAACwB,EAAE,EAAErG,MAAM,CAAC;QAC3B;QACA,IAAI5C,OAAO,CAACoN,OAAO,CAAC,oBAAoB,CAAC,IAAI,CAAC,EAAE;UAC5CvN,KAAK,CAACI,oBAAoB,CAACD,OAAO,CAAC;QACvC;MACJ,CAAC,CAAC;IACN;IACA,IAAIiD,gBAAgB,EAAE;MAClB,IAAI,CAAC5E,KAAK,CAAC4E,gBAAgB,CAACA,gBAAgB,CAAC;IACjD;IACA,OAAO8J,OAAO;EAClB,CAAC;EACD5O,YAAY,CAACD,SAAS,CAACsO,kBAAkB,GAAG,UAAUlG,SAAS,EAAElI,EAAE,EAAE2H,aAAa,EAAE;IAChF,IAAIlG,KAAK,GAAG,IAAI;IAChB,IAAI+D,KAAK,GAAGxF,EAAE,CAACwF,KAAK;MAAEnD,SAAS,GAAGrC,EAAE,CAACqC,SAAS;MAAEU,WAAW,GAAG/C,EAAE,CAAC+C,WAAW;MAAEkM,kBAAkB,GAAGjP,EAAE,CAACiP,kBAAkB;MAAEhM,WAAW,GAAGjD,EAAE,CAACiD,WAAW;MAAE6C,iBAAiB,GAAG9F,EAAE,CAAC8F,iBAAiB;MAAE3C,OAAO,GAAGnD,EAAE,CAACmD,OAAO;MAAEoG,2BAA2B,GAAGvJ,EAAE,CAACuJ,2BAA2B;IACpR,IAAI2F,gBAAgB,GAAGhH,SAAS,CAACP,aAAa;IAC9CO,SAAS,CAACwB,IAAI,CAAC;MACXpG,QAAQ,EAAE,IAAI,CAACM,SAAS,CAAC4B,KAAK,CAAC,CAAClC,QAAQ;MACxCjB,SAAS,EAAEA,SAAS;MACpBsF,aAAa,EAAEA;IACnB,CAAC,CAAC;IACF,IAAIwH,SAAS,GAAG,YAAY;MAAE,OAAOjH,SAAS,CAACwG,OAAO,CAACrM,SAAS,CAAC;IAAE,CAAC;IACpE,IAAI+M,gBAAgB,GAAG,UAAU1J,IAAI,EAAEiC,aAAa,EAAE;MAClD,IAAIA,aAAa,KAAK,KAAK,CAAC,EAAE;QAAEA,aAAa,GAAGO,SAAS,CAACP,aAAa,IAAIpI,aAAa,CAAC0E,OAAO;MAAE;MAClG,IAAIqB,IAAI,GAAGI,IAAI,CAAClB,MAAM;MACtB,IAAIzC,OAAO,IACP,CAAC+D,iBAAiB,IAClB,CAAChI,KAAK,CAACwH,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE;QAClBhG,qBAAqB,CAACoG,IAAI,CAAC2J,OAAO,CAAC;MACvC;MACA,IAAIC,QAAQ,GAAG,UAAUhK,IAAI,EAAE;QAAE,OAAO3G,UAAU,CAACsO,EAAE,CAACxP,QAAQ,CAAC;UAAE6H,IAAI,EAAEA,IAAI;UAAErB,OAAO,EAAEzE,wBAAwB,CAACmI,aAAa,CAAC;UAAEA,aAAa,EAAEA;QAAc,CAAC,EAAGjC,IAAI,CAACa,QAAQ,GAAG,IAAI,GAAG;UAAEgJ,OAAO,EAAE;QAAK,CAAC,CAAE,CAAC;MAAE,CAAC;MAC9M,IAAIjK,IAAI,IAAI7D,KAAK,CAACmC,SAAS,CAAC4B,KAAK,CAAC,CAACmD,kBAAkB,EAAE;QACnD,OAAOlH,KAAK,CAACd,UAAU,CAACuM,YAAY,CAAC;UACjC5J,QAAQ,EAAEkC,KAAK;UACf2H,YAAY,EAAE;YAAE7H,IAAI,EAAEA;UAAK,CAAC;UAC5BnC,OAAO,EAAEA,OAAO;UAChBd,SAAS,EAAEA,SAAS;UACpBmN,sBAAsB,EAAE;QAC5B,CAAC,CAAC,CAACjI,IAAI,CAAC,UAAUkI,QAAQ,EAAE;UAAE,OAAOH,QAAQ,CAACG,QAAQ,CAACnK,IAAI,IAAI,KAAK,CAAC,CAAC;QAAE,CAAC,CAAC;MAC9E;MACA,IAAIrC,WAAW,KAAK,MAAM,IACtB0E,aAAa,KAAKpI,aAAa,CAACqM,OAAO,IACvClB,KAAK,CAACC,OAAO,CAACjF,IAAI,CAAC2J,OAAO,CAAC,EAAE;QAC7B,OAAOC,QAAQ,CAAC,KAAK,CAAC,CAAC;MAC3B;MACA,OAAOA,QAAQ,CAAChK,IAAI,CAAC;IACzB,CAAC;IACD,IAAI+H,kBAAkB,GAAGtK,WAAW,KAAK,UAAU,GAAG,CAAC,GAClD4E,aAAa,KAAKpI,aAAa,CAACqM,OAAO,IACpCqD,kBAAkB,KAAK,OAAO,GAAI,CAAC,GACjC,CAAC;IACX,IAAIS,eAAe,GAAG,YAAY;MAAE,OAAOjO,KAAK,CAAC2L,kBAAkB,CAAClF,SAAS,EAAEmF,kBAAkB,EAAE;QAC/FhL,SAAS,EAAEA,SAAS;QACpBc,OAAO,EAAEA,OAAO;QAChBJ,WAAW,EAAEA,WAAW;QACxBE,WAAW,EAAEA;MACjB,CAAC,CAAC;IAAE,CAAC;IACL,IAAI0M,YAAY,GAAGpG,2BAA2B,IAC1C,OAAO2F,gBAAgB,KAAK,QAAQ,IACpCA,gBAAgB,KAAKvH,aAAa,IAClCnI,wBAAwB,CAACmI,aAAa,CAAC;IAC3C,QAAQ5E,WAAW;MACf;MACA,KAAK,aAAa;QAAE;UAChB,IAAI2C,IAAI,GAAGyJ,SAAS,EAAE;UACtB,IAAIzJ,IAAI,CAACa,QAAQ,EAAE;YACf,OAAO,CACH6I,gBAAgB,CAAC1J,IAAI,EAAEwC,SAAS,CAAC0F,SAAS,EAAE,CAAC,CAChD;UACL;UACA,IAAI9H,iBAAiB,IAAI6J,YAAY,EAAE;YACnC,OAAO,CACHP,gBAAgB,CAAC1J,IAAI,CAAC,EACtBgK,eAAe,EAAE,CACpB;UACL;UACA,OAAO,CACHA,eAAe,EAAE,CACpB;QACL;MACA,KAAK,mBAAmB;QAAE;UACtB,IAAIhK,IAAI,GAAGyJ,SAAS,EAAE;UACtB,IAAIzJ,IAAI,CAACa,QAAQ,IAAIT,iBAAiB,IAAI6J,YAAY,EAAE;YACpD,OAAO,CACHP,gBAAgB,CAAC1J,IAAI,CAAC,EACtBgK,eAAe,EAAE,CACpB;UACL;UACA,OAAO,CACHA,eAAe,EAAE,CACpB;QACL;MACA,KAAK,YAAY;QACb,OAAO,CACHN,gBAAgB,CAACD,SAAS,EAAE,EAAEjH,SAAS,CAAC0F,SAAS,EAAE,CAAC,CACvD;MACL,KAAK,cAAc;QACf,IAAI+B,YAAY,EAAE;UACd,OAAO,CACHP,gBAAgB,CAACD,SAAS,EAAE,CAAC,EAC7BO,eAAe,EAAE,CACpB;QACL;QACA,OAAO,CAACA,eAAe,EAAE,CAAC;MAC9B,KAAK,UAAU;QACX,IAAIC,YAAY,EAAE;UACd,OAAO,CACHP,gBAAgB,CAAClH,SAAS,CAACwG,OAAO,EAAE,CAAC,EACrCgB,eAAe,EAAE,CACpB;QACL;QACA,OAAO,CAACA,eAAe,EAAE,CAAC;MAC9B,KAAK,SAAS;QACV,OAAO,EAAE;IAAC;EAEtB,CAAC;EACD3P,YAAY,CAACD,SAAS,CAACkL,QAAQ,GAAG,UAAUpJ,OAAO,EAAE;IACjD,IAAIA,OAAO,IAAI,CAAC,IAAI,CAACf,OAAO,CAACuH,GAAG,CAACxG,OAAO,CAAC,EAAE;MACvC,IAAI,CAACf,OAAO,CAACwI,GAAG,CAACzH,OAAO,EAAE,IAAIlC,SAAS,CAAC,IAAI,EAAEkC,OAAO,CAAC,CAAC;IAC3D;IACA,OAAO,IAAI,CAACf,OAAO,CAACwF,GAAG,CAACzE,OAAO,CAAC;EACpC,CAAC;EACD7B,YAAY,CAACD,SAAS,CAAC6M,cAAc,GAAG,UAAUxJ,OAAO,EAAE;IACvD,IAAIA,OAAO,KAAK,KAAK,CAAC,EAAE;MAAEA,OAAO,GAAG,CAAC,CAAC;IAAE;IACxC,IAAIyM,UAAU,GAAG,IAAI,CAACjP,UAAU,CAACgM,cAAc,CAACxJ,OAAO,CAAC;IACxD,OAAO1F,QAAQ,CAACA,QAAQ,CAAC,CAAC,CAAC,EAAEmS,UAAU,CAAC,EAAE;MAAElP,eAAe,EAAE,IAAI,CAACA;IAAgB,CAAC,CAAC;EACxF,CAAC;EACD,OAAOX,YAAY;AACvB,CAAC,EAAG;AACJ,SAASA,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}