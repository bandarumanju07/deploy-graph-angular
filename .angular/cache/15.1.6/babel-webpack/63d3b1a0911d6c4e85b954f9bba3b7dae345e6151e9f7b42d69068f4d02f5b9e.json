{"ast":null,"code":"import { isAsyncIterableIterator, isBlob, isNodeResponse, isNodeReadableStream, isReadableStream, isStreamableBlob } from \"../../utilities/common/responseIterator.js\";\nimport asyncIterator from \"./iterators/async.js\";\nimport nodeStreamIterator from \"./iterators/nodeStream.js\";\nimport promiseIterator from \"./iterators/promise.js\";\nimport readerIterator from \"./iterators/reader.js\";\nexport function responseIterator(response) {\n  var body = response;\n  if (isNodeResponse(response)) body = response.body;\n  if (isAsyncIterableIterator(body)) return asyncIterator(body);\n  if (isReadableStream(body)) return readerIterator(body.getReader());\n  if (isStreamableBlob(body)) {\n    return readerIterator(body.stream().getReader());\n  }\n  if (isBlob(body)) return promiseIterator(body.arrayBuffer());\n  if (isNodeReadableStream(body)) return nodeStreamIterator(body);\n  throw new Error(\"Unknown body type for responseIterator. Please pass a streamable response.\");\n}","map":{"version":3,"names":["isAsyncIterableIterator","isBlob","isNodeResponse","isNodeReadableStream","isReadableStream","isStreamableBlob","asyncIterator","nodeStreamIterator","promiseIterator","readerIterator","responseIterator","response","body","getReader","stream","arrayBuffer","Error"],"sources":["/Users/manjunathbandaru/deploy-graph-angular/node_modules/@apollo/client/link/http/responseIterator.js"],"sourcesContent":["import { isAsyncIterableIterator, isBlob, isNodeResponse, isNodeReadableStream, isReadableStream, isStreamableBlob, } from \"../../utilities/common/responseIterator.js\";\nimport asyncIterator from \"./iterators/async.js\";\nimport nodeStreamIterator from \"./iterators/nodeStream.js\";\nimport promiseIterator from \"./iterators/promise.js\";\nimport readerIterator from \"./iterators/reader.js\";\nexport function responseIterator(response) {\n    var body = response;\n    if (isNodeResponse(response))\n        body = response.body;\n    if (isAsyncIterableIterator(body))\n        return asyncIterator(body);\n    if (isReadableStream(body))\n        return readerIterator(body.getReader());\n    if (isStreamableBlob(body)) {\n        return readerIterator(body.stream().getReader());\n    }\n    if (isBlob(body))\n        return promiseIterator(body.arrayBuffer());\n    if (isNodeReadableStream(body))\n        return nodeStreamIterator(body);\n    throw new Error(\"Unknown body type for responseIterator. Please pass a streamable response.\");\n}\n"],"mappings":"AAAA,SAASA,uBAAuB,EAAEC,MAAM,EAAEC,cAAc,EAAEC,oBAAoB,EAAEC,gBAAgB,EAAEC,gBAAgB,QAAS,4CAA4C;AACvK,OAAOC,aAAa,MAAM,sBAAsB;AAChD,OAAOC,kBAAkB,MAAM,2BAA2B;AAC1D,OAAOC,eAAe,MAAM,wBAAwB;AACpD,OAAOC,cAAc,MAAM,uBAAuB;AAClD,OAAO,SAASC,gBAAgB,CAACC,QAAQ,EAAE;EACvC,IAAIC,IAAI,GAAGD,QAAQ;EACnB,IAAIT,cAAc,CAACS,QAAQ,CAAC,EACxBC,IAAI,GAAGD,QAAQ,CAACC,IAAI;EACxB,IAAIZ,uBAAuB,CAACY,IAAI,CAAC,EAC7B,OAAON,aAAa,CAACM,IAAI,CAAC;EAC9B,IAAIR,gBAAgB,CAACQ,IAAI,CAAC,EACtB,OAAOH,cAAc,CAACG,IAAI,CAACC,SAAS,EAAE,CAAC;EAC3C,IAAIR,gBAAgB,CAACO,IAAI,CAAC,EAAE;IACxB,OAAOH,cAAc,CAACG,IAAI,CAACE,MAAM,EAAE,CAACD,SAAS,EAAE,CAAC;EACpD;EACA,IAAIZ,MAAM,CAACW,IAAI,CAAC,EACZ,OAAOJ,eAAe,CAACI,IAAI,CAACG,WAAW,EAAE,CAAC;EAC9C,IAAIZ,oBAAoB,CAACS,IAAI,CAAC,EAC1B,OAAOL,kBAAkB,CAACK,IAAI,CAAC;EACnC,MAAM,IAAII,KAAK,CAAC,4EAA4E,CAAC;AACjG"},"metadata":{},"sourceType":"module","externalDependencies":[]}